{"doc/js/lib/Authorized.js":{"description":"Component which renders its children only if authorization check succeeds.\nAuthorization check is performed against the URL passed in as ``access``\nprop.","props":{"access":{"type":{"name":"string"},"required":true,"description":"An URL in pkg:/path format to check if current user has access to.","defaultValue":{"value":"null","computed":false}},"children":{"type":{"name":"element"},"required":false,"description":"Elements to render in case authorization check succeeds."},"fallback":{"type":{"name":"element"},"required":false,"description":"Elements to render in case authorization check fails.","defaultValue":{"value":"null","computed":false}}}},"doc/js/lib/Autocomplete.js":{"description":"Autocomplete component.","props":{"value":{"type":{"name":"string"},"required":false,"description":"Value."},"onChange":{"type":{"name":"func"},"required":false,"description":"Callback to execute when value changes."},"dataSpec":{"type":{"name":"object"},"required":false,"description":"Data specification from which to fetch options.\n\nThe filter which would be applied to match against record is\n``*.titleAttribute:contains=<term>`` where titleAttribute is passed via\n``titleAttribute`` prop."},"titleAttribute":{"type":{"name":"string"},"required":false,"description":"Attribute used as a title of a record.\n\nAlso used to specify a filter.","defaultValue":{"value":"'title'","computed":false}},"valueAttribute":{"type":{"name":"string"},"required":false,"description":"Attribute used as a value of a record.","defaultValue":{"value":"'id'","computed":false}}}},"doc/js/lib/BaseDataTable.js":{"description":"DataTable component.","props":{"columns":{"type":{"name":"array"},"required":true,"description":"An array of column specifications.\n\nEach column has a form of::\n\n  {\n    valueKey: <column key>,\n    label: <column name>,\n    width: <column width>,\n    sortable: <if column should be made sortable>,\n    resizable: <if column should be made resizable>\n  }"},"data":{"type":{"name":"object"},"required":true,"description":"DataSet object (RexWidget.DataSet) used to render DataTable."},"selectable":{"type":{"name":"bool"},"required":false,"description":"If DataTable should allow selecting its rows."},"onSelected":{"type":{"name":"func"},"required":false,"description":"Callback which is executed when selected row changes, it is provided with\nrow id and row itself as its arguments."},"selected":{"type":{"name":"string"},"required":false,"description":"Currently selected row id."},"rowHeight":{"defaultValue":{"value":"35","computed":false}},"headerHeight":{"defaultValue":{"value":"35","computed":false}},"resizableColumns":{"defaultValue":{"value":"true","computed":false}},"sortable":{"defaultValue":{"value":"true","computed":false}},"onDataSort":{"defaultValue":{"value":"require('./emptyFunction')","computed":true}},"onSelect":{"defaultValue":{"value":"require('./emptyFunction')","computed":true}},"onDeselect":{"defaultValue":{"value":"require('./emptyFunction')","computed":true}}}},"doc/js/lib/BaseSelect.js":{"description":"","props":{"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":""},"emptyValue":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{id: sentinel, title: ''}","computed":false}},"noEmptyValue":{"type":{"name":"bool"},"required":false,"description":""},"titleForEmpty":{"type":{"name":"string"},"required":false,"description":""},"data":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"null","computed":false}},"options":{"type":{"name":"array"},"required":false,"description":"","defaultValue":{"value":"[]","computed":false}},"onValue":{"type":{"name":"func"},"required":true,"description":""}}},"doc/js/lib/Box.js":{"description":"","props":{"Component":{"defaultValue":{"value":"'div'","computed":false}}}},"doc/js/lib/Button.js":{"description":"","props":{"onClick":{"type":{"name":"func"},"required":false,"description":"","defaultValue":{"value":"require('./emptyFunction')","computed":true}},"link":{"type":{"name":"bool"},"required":false,"description":""},"success":{"type":{"name":"bool"},"required":false,"description":""},"danger":{"type":{"name":"bool"},"required":false,"description":""},"icon":{"type":{"name":"string"},"required":false,"description":""},"type":{"defaultValue":{"value":"'button'","computed":false}}}},"doc/js/lib/DataTable.js":{"description":"DataTable component.","props":{"columns":{"type":{"name":"array"},"required":true,"description":"An array of column specifications.\n\nEach column has a form of::\n\n  {\n    valueKey: <column key>,\n    label: <column name>,\n    width: <column width>,\n    sortable: <if column should be made sortable>,\n    resizable: <if column should be made resizable>\n  }"},"dataSpec":{"type":{"name":"object"},"required":true,"description":"Data specification which is used to fetch data for datatable."},"selectable":{"type":{"name":"bool"},"required":false,"description":"If DataTable should allow selecting its rows."},"onSelected":{"type":{"name":"func"},"required":false,"description":"Callback which is executed when selected row changes, it is provided with\nrow id and row itself as its arguments."},"selected":{"type":{"name":"string"},"required":false,"description":"Currently selected row id."}}},"doc/js/lib/DataTableWithSearch.js":{"description":"","props":{"children":{"defaultValue":{"value":"<DataTable />","computed":false}}}},"doc/js/lib/FileDownload.js":{"description":"","props":{}},"doc/js/lib/HBox.js":{"description":"","props":{}},"doc/js/lib/IFrame.js":{"description":"","props":{}},"doc/js/lib/Icon.js":{"description":"","props":{"name":{"type":{"name":"string"},"required":true,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""}}},"doc/js/lib/IconButton.js":{"description":"","props":{}},"doc/js/lib/Info.js":{"description":"","props":{}},"doc/js/lib/Link.js":{"description":"","props":{"href":{"type":{"name":"string"},"required":true,"description":""},"params":{"type":{"name":"object"},"required":false,"description":""}}},"doc/js/lib/LoadingIndicator.js":{"description":"","props":{}},"doc/js/lib/Modal.js":{"description":"","props":{"showTitle":{"defaultValue":{"value":"true","computed":false}}}},"doc/js/lib/ModalButton.js":{"description":"","props":{"buttonAlign":{"defaultValue":{"value":"'left'","computed":false}}}},"doc/js/lib/Preloader.js":{"description":"","props":{"caption":{"defaultValue":{"value":"null","computed":false}}}},"doc/js/lib/SearchInput.js":{"description":"","props":{"onChange":{"defaultValue":{"value":"require('./emptyFunction')","computed":true}},"placeholder":{"defaultValue":{"value":"'Search...'","computed":false}},"style":{"defaultValue":{"value":"{}","computed":false}}}},"doc/js/lib/Select.js":{"description":"","props":{}},"doc/js/lib/ShowPreloader.js":{"description":"","props":{"showPreloaderWhenNoData":{"defaultValue":{"value":"false","computed":false}}}},"doc/js/lib/Tab.js":{"description":"","props":{"size":{"defaultValue":{"value":"1","computed":false}}}},"doc/js/lib/Tabs.js":{"description":"","props":{"size":{"defaultValue":{"value":"1","computed":false}},"buttonsPosition":{"defaultValue":{"value":"'top'","computed":false}},"buttonsStyle":{"defaultValue":{"value":"'tabs'","computed":false}}}},"doc/js/lib/_forms/Field.js":{"description":"","props":{"children":{"defaultValue":{"value":"<input type=\"text\" />","computed":false}}}},"doc/js/lib/_forms/Fieldset.js":{"description":"","props":{"component":{"defaultValue":{"value":"'div'","computed":false}}}},"doc/js/lib/_forms/Form.js":{"description":"","props":{"schema":{"defaultValue":{"value":"{\n  id: 'emptyschema',\n  type: 'object'\n}","computed":false}},"value":{"defaultValue":{"value":"{}","computed":false}},"onChange":{"defaultValue":{"value":"emptyFunction","computed":true}}}},"doc/js/lib/forms/AutocompleteField.js":{"description":"","props":{}},"doc/js/lib/forms/CheckboxField.js":{"description":"","props":{}},"doc/js/lib/forms/ConfigurableField.js":{"description":"","props":{}},"doc/js/lib/forms/ConfigurableForm.js":{"description":"Form which has fieldset configurable through URL mapping.","props":{"schema":{"type":{"name":"object"},"required":false,"description":"Schema for the entity port returns.\n\nUsually port returns data in the form of::\n\n  {entity: [{...}, ...]}\n\nUsing ConfigurableForm we need to define schema only for records within\nthe ``entity`` array."},"value":{"type":{"name":"object"},"required":false,"description":"Initial value for form."},"fields":{"type":{"name":"array"},"required":false,"description":"An array of fields in form of::\n\n  [\n    {\n      valueKey: <key for field>,\n      label: <label>,\n      type: <field type, one of 'string', 'date', 'bool', 'option',\n                                'autocomplete', 'list'>\n    }\n  ]"},"onSubmitComplete":{"defaultValue":{"value":"require('../emptyFunction')","computed":true}}},"composes":["./Form"]},"doc/js/lib/forms/DatepickerField.js":{"description":"","props":{}},"doc/js/lib/forms/EntityForm.js":{"description":"Form which operates on a single entity within the port response.","props":{"entity":{"type":{"name":"string"},"required":true,"description":"Name of the entity as defined in port."},"schema":{"type":{"name":"object"},"required":true,"description":"Data schema."},"submitTo":{"type":{"name":"object"},"required":true,"description":"Data specification of where to submit form to."},"value":{"defaultValue":{"value":"{}","computed":false}}}},"doc/js/lib/forms/Field.js":{"description":"","props":{"serialize":{"defaultValue":{"value":"(value) => (value)","computed":false}},"deserialize":{"defaultValue":{"value":"(value) => (value)","computed":false}},"labelSize":{"defaultValue":{"value":"2","computed":false}},"inputSize":{"defaultValue":{"value":"5","computed":false}}}},"doc/js/lib/forms/FileUploadField.js":{"description":"","props":{}},"doc/js/lib/forms/Form.js":{"description":"","props":{"submitTo":{"type":{"name":"object"},"required":false,"description":"Data specification to submit form value to."},"schema":{"type":{"name":"object"},"required":false,"description":"Form schema in json schema format."},"value":{"type":{"name":"object"},"required":false,"description":"Initial form value."},"submitButton":{"type":{"name":"element"},"required":false,"description":"Submit button element.","defaultValue":{"value":"<Button success>Submit</Button>","computed":false}},"submitButtonTitle":{"type":{"name":"string"},"required":false,"description":"Submit button title."},"onSubmit":{"type":{"name":"func"},"required":false,"description":"Callback which fires on form submit.\n\nThis callback can alter form value before submitting it to server by\nreturning a new value.","defaultValue":{"value":"emptyFunction.thatReturnsArgument","computed":true}},"onSubmitComplete":{"type":{"name":"func"},"required":false,"description":"Callback which fires after form submit is complete.","defaultValue":{"value":"require('../emptyFunction')","computed":true}},"onSubmitError":{"type":{"name":"func"},"required":false,"description":"Callback which fires if form submit results in an error.","defaultValue":{"value":"require('../emptyFunction')","computed":true}},"onChange":{"defaultValue":{"value":"emptyFunction.thatReturnsArgument","computed":true}},"onUpdate":{"defaultValue":{"value":"emptyFunction.thatReturnsArgument","computed":true}},"progressNotification":{"defaultValue":{"value":"<NotificationCenter.Notification\n  kind=\"info\"\n  text=\"Data saving is in progress\"\n  icon=\"cog\"\n  ttl={Infinity}\n  />","computed":false}},"completeNotification":{"defaultValue":{"value":"<NotificationCenter.Notification\n  kind=\"success\"\n  text=\"Data saved successfully\"\n  icon=\"ok\"\n  />","computed":false}},"errorNotification":{"defaultValue":{"value":"<NotificationCenter.Notification\n  kind=\"danger\"\n  text=\"There was an error while submitting data to server\"\n  icon=\"remove\"\n  />","computed":false}}}},"doc/js/lib/forms/Input.js":{"description":"","props":{"type":{"defaultValue":{"value":"\"text\"","computed":false}}}},"doc/js/lib/forms/IntegerField.js":{"description":"","props":{}},"doc/js/lib/forms/ReadOnlyField.js":{"description":"","props":{"renderValue":{"defaultValue":{"value":"renderValue","computed":true}},"labelSize":{"defaultValue":{"value":"2","computed":false}},"inputSize":{"defaultValue":{"value":"5","computed":false}}}},"doc/js/lib/forms/RepeatingFieldset.js":{"description":"","props":{"addButtonText":{"defaultValue":{"value":"'Add'","computed":false}}}},"doc/js/lib/forms/SelectField.js":{"description":"","props":{}},"doc/js/lib/forms/TextareaField.js":{"description":"","props":{}},"doc/js/lib/library/DataGrid.js":{"description":"","props":{}},"doc/js/lib/library/Link.js":{"description":"","props":{}},"doc/js/lib/library/LinkButton.js":{"description":"","props":{"quiet":{"defaultValue":{"value":"true","computed":false}},"align":{"defaultValue":{"value":"'left'","computed":false}}}}}
