// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StatePath.fromPath()/toPath()  1`] = `
Object {
  "context": Object {},
  "instruction": Object {
    "action": Object {
      "commands": Object {},
      "contextTypes": Object {
        "input": RecordType {
          "open": true,
          "rows": Object {},
        },
        "output": RecordType {
          "open": true,
          "rows": Object {},
        },
      },
      "domain": Object {},
      "element": <div />,
      "id": "one",
    },
    "then": Array [],
    "type": "execute",
  },
  "stack": Array [],
  "state": Object {},
  "trace": Array [],
}
`;

exports[`StatePath.fromPath()/toPath() / 1`] = `
Object {
  "context": Object {},
  "instruction": Object {
    "action": Object {
      "commands": Object {},
      "contextTypes": Object {
        "input": RecordType {
          "open": true,
          "rows": Object {},
        },
        "output": RecordType {
          "open": true,
          "rows": Object {},
        },
      },
      "domain": Object {},
      "element": <div />,
      "id": "one",
    },
    "then": Array [],
    "type": "execute",
  },
  "stack": Array [],
  "state": Object {},
  "trace": Array [],
}
`;

exports[`StatePath.fromPath()/toPath() /one 1`] = `
Object {
  "context": Object {},
  "instruction": Object {
    "action": Object {
      "commands": Object {},
      "contextTypes": Object {
        "input": RecordType {
          "open": true,
          "rows": Object {},
        },
        "output": RecordType {
          "open": true,
          "rows": Object {},
        },
      },
      "domain": Object {},
      "element": <div />,
      "id": "one",
    },
    "then": Array [],
    "type": "execute",
  },
  "stack": Array [],
  "state": Object {},
  "trace": Array [],
}
`;

exports[`StatePath.fromPath()/toPath() /two 1`] = `
Object {
  "context": Object {},
  "instruction": Object {
    "action": Object {
      "commands": Object {},
      "contextTypes": Object {
        "input": RecordType {
          "open": true,
          "rows": Object {},
        },
        "output": RecordType {
          "open": true,
          "rows": Object {},
        },
      },
      "domain": Object {},
      "element": <div />,
      "id": "two",
    },
    "then": Array [
      Object {
        "action": Object {
          "commands": Object {},
          "contextTypes": Object {
            "input": RecordType {
              "open": true,
              "rows": Object {},
            },
            "output": RecordType {
              "open": true,
              "rows": Object {},
            },
          },
          "domain": Object {},
          "element": <div />,
          "id": "three",
        },
        "then": Array [],
        "type": "execute",
      },
    ],
    "type": "execute",
  },
  "stack": Array [],
  "state": Object {},
  "trace": Array [],
}
`;

exports[`StatePath.fromPath()/toPath() /two/three 1`] = `
Object {
  "context": Object {},
  "instruction": Object {
    "action": Object {
      "commands": Object {},
      "contextTypes": Object {
        "input": RecordType {
          "open": true,
          "rows": Object {},
        },
        "output": RecordType {
          "open": true,
          "rows": Object {},
        },
      },
      "domain": Object {},
      "element": <div />,
      "id": "three",
    },
    "then": Array [],
    "type": "execute",
  },
  "stack": Array [],
  "state": Object {},
  "trace": Array [
    Object {
      "context": Object {},
      "instruction": Object {
        "action": Object {
          "commands": Object {},
          "contextTypes": Object {
            "input": RecordType {
              "open": true,
              "rows": Object {},
            },
            "output": RecordType {
              "open": true,
              "rows": Object {},
            },
          },
          "domain": Object {},
          "element": <div />,
          "id": "two",
        },
        "then": Array [
          Object {
            "action": Object {
              "commands": Object {},
              "contextTypes": Object {
                "input": RecordType {
                  "open": true,
                  "rows": Object {},
                },
                "output": RecordType {
                  "open": true,
                  "rows": Object {},
                },
              },
              "domain": Object {},
              "element": <div />,
              "id": "three",
            },
            "then": Array [],
            "type": "execute",
          },
        ],
        "type": "execute",
      },
      "stack": Array [],
      "state": Object {},
      "trace": Array [],
    },
  ],
}
`;

exports[`StatePath.fromPath()/toPath() /with-default-command 1`] = `
Object {
  "context": Object {},
  "instruction": Object {
    "action": Object {
      "commands": Object {
        "default": Command {
          "_execute": [Function],
          "argumentTypes": Array [
            ValueType {},
          ],
          "name": "default",
        },
      },
      "contextTypes": Object {
        "input": RecordType {
          "open": true,
          "rows": Object {},
        },
        "output": RecordType {
          "open": true,
          "rows": Object {},
        },
      },
      "domain": Object {},
      "element": <div />,
      "id": "with-default-command",
    },
    "then": Array [],
    "type": "execute",
  },
  "stack": Array [],
  "state": Object {},
  "trace": Array [],
}
`;

exports[`StatePath.fromPath()/toPath() /with-default-command[42] 1`] = `
Object {
  "command": Object {
    "args": Array [
      "42",
    ],
    "commandName": "default",
  },
  "context": Object {
    "value": "42",
  },
  "instruction": Object {
    "action": Object {
      "commands": Object {
        "default": Command {
          "_execute": [Function],
          "argumentTypes": Array [
            ValueType {},
          ],
          "name": "default",
        },
      },
      "contextTypes": Object {
        "input": RecordType {
          "open": true,
          "rows": Object {},
        },
        "output": RecordType {
          "open": true,
          "rows": Object {},
        },
      },
      "domain": Object {},
      "element": <div />,
      "id": "with-default-command",
    },
    "then": Array [],
    "type": "execute",
  },
  "stack": Array [],
  "state": Object {},
  "trace": Array [],
}
`;

exports[`StatePath.fromPath()/toPath() /with-named-command 1`] = `
Object {
  "context": Object {},
  "instruction": Object {
    "action": Object {
      "commands": Object {
        "named": Command {
          "_execute": [Function],
          "argumentTypes": Array [
            ValueType {},
          ],
          "name": "default",
        },
      },
      "contextTypes": Object {
        "input": RecordType {
          "open": true,
          "rows": Object {},
        },
        "output": RecordType {
          "open": true,
          "rows": Object {},
        },
      },
      "domain": Object {},
      "element": <div />,
      "id": "with-named-command",
    },
    "then": Array [],
    "type": "execute",
  },
  "stack": Array [],
  "state": Object {},
  "trace": Array [],
}
`;

exports[`StatePath.fromPath()/toPath() /with-named-command.named[32] 1`] = `
Object {
  "command": Object {
    "args": Array [
      "32",
    ],
    "commandName": "named",
  },
  "context": Object {
    "value": "32",
  },
  "instruction": Object {
    "action": Object {
      "commands": Object {
        "named": Command {
          "_execute": [Function],
          "argumentTypes": Array [
            ValueType {},
          ],
          "name": "default",
        },
      },
      "contextTypes": Object {
        "input": RecordType {
          "open": true,
          "rows": Object {},
        },
        "output": RecordType {
          "open": true,
          "rows": Object {},
        },
      },
      "domain": Object {},
      "element": <div />,
      "id": "with-named-command",
    },
    "then": Array [],
    "type": "execute",
  },
  "stack": Array [],
  "state": Object {},
  "trace": Array [],
}
`;
