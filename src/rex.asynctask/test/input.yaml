#
# Copyright (c) 2015, Prometheus Research, LLC
#

title: REX.ASYNCTASK
tests:
  - rmdir: ./build/coverage
  - mkdir: ./build/coverage
  - coverage: setup.cfg
    auto-data: true

  # Monkeypatching multiprocessing to work with coverage.py
  # Adapted from: https://bitbucket.org/ned/coveragepy/src/f84263e515c2eecc6500c91eafd8aca62c96720f/coverage/monkey.py
  #  - py: |
  #      import multiprocessing
  #      import multiprocessing.process
  #      import sys
  #      if sys.version_info >= (3, 4):
  #          klass = multiprocessing.process.BaseProcess
  #      else:
  #          klass = multiprocessing.Process
  #      original_bootstrap = klass._bootstrap
  #      class ProcessWithCoverage(klass):
  #          def _bootstrap(self):
  #              from coverage import coverage
  #              cov = coverage(data_suffix=True, auto_data=True, config_file='setup.cfg')
  #              cov.start()
  #              try:
  #                  return original_bootstrap(self)
  #              finally:
  #                  cov.stop()
  #                  cov.save()
  #      if sys.version_info >= (3, 4):
  #          klass._bootstrap = ProcessWithCoverage._bootstrap
  #      else:
  #          multiprocessing.Process = ProcessWithCoverage
  # End Monkeypatching

  - sh: pip install --quiet --editable ./demo

  - sh: rex dropdb --quiet rex.asynctask_demo
  - sh: rex deploy --quiet rex.asynctask_demo

  - doctest: README.rst
  - doctest: test/test_*.rst

  - py: |
      from redis import StrictRedis, RedisError
      client = StrictRedis(host='localhost')
      try:
        client.ping()
      except RedisError:
        __pbbt__['HAS_REDIS'] = False
      else:
        __pbbt__['HAS_REDIS'] = True

  - doctest: test/redis/test_*.rst
    if: HAS_REDIS

  - coverage-check: 90.0
  - coverage-report: ./build/coverage

