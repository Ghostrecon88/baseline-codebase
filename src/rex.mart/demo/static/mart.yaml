definitions:
  - id: empty

  - id: just_copy
    description: Copy an existing DB
    base:
      type: copy
      target: mart_demo

  - id: just_copy_missing
    description: Copy a DB that doesn't exist
    base:
      type: copy
      target: does_not_exist

  - id: just_copy_application
    description: Copy the application DB
    base:
      type: application

  - id: just_deploy
    label: Just Deploy
    description: A Mart that just has empty tables
    deploy: !include simple_deploy.yaml

  - id: just_deploy_includes
    label: Just Deploy (w/ Includes)
    description: A Mart that just has empty tables using a deploy configuration that has include statements
    deploy: !include indirect_simple_deploy.yaml

  - id: some_data
    description: Make a table and put some data in it
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str simple_etl.htsql
        type: htsql

  - id: some_more_data
    description: Make a table and put some data in it with multiple scripts/statements
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str simple_etl.htsql
        type: htsql
      - script: !include/str multiple_etl.htsql
        type: htsql

  - id: some_sql_data
    description: Make a table and put some data in it with SQL
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str simple_etl.sql
        type: sql

  - id: some_more_sql_data
    description: Make a table and put some data in it with multiple SQL scripts/statements
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str simple_etl.sql
        type: sql
      - script: !include/str multiple_etl.sql
        type: sql

  - id: both_etl_phases
    description: Load a table with various scripts in both ETL phases
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str simple_etl.htsql
        type: htsql
      - script: !include/str multiple_etl.sql
        type: sql
    post_assessment_scripts:
      - script: !include/str multiple_etl.htsql
        type: htsql
      - script: !include/str simple_etl.sql
        type: sql

  - id: some_data_with_params
    description: Make a table and put some data in it using script parameters
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str params_etl.htsql
        type: htsql
        parameters:
          var1: 'foo'
          var2: 'bar'
      - script: !include/str params_etl.sql
        type: sql
        parameters:
          var1: 'baz'
          var2: 'blah'

  - id: existing
    description: Load an existing database
    base:
      type: existing
      target: mart_demo
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str simple_etl.htsql
        type: htsql

  - id: fixed_name
    description: Create Marts with the same database name every time
    base:
      type: fresh
      fixed_name: a_fixed_name_mart
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str simple_etl.htsql
        type: htsql

  - id: existing_missing
    description: Load a missing existing database
    base:
      type: existing
      target: a_db_that_doesnt_exist
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str simple_etl.htsql
        type: htsql

  - id: broken_htsql
    description: Definition with a broken HTSQL ETL script
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str broken_simple_etl.htsql
        type: htsql

  - id: broken_sql
    description: Definition with a broken SQL ETL script
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str broken_simple_etl.sql
        type: sql

  - id: simple_assessment
    description: Load a Mart with a single set of Assessments
    assessments:
      - instrument: mart1
        selector: |
          /assessment{
            id() :as assessment_uid,
            age_at_evaluation
          }.filter(
            instrumentversion.instrument='mart1'
          )/:rexdb

  - id: linked_assessment
    description: Load a Mart with a table and an Assessment and link them
    deploy: !include simple_subject.yaml
    post_deploy_scripts:
      - script: !include/str subject.htsql
        type: htsql
    assessments:
      - instrument: mart1
        selector:
          query: |
            /assessment{
              id() :as assessment_uid,
              subject.id() :as subject
            }.filter(
              instrumentversion.instrument=$INSTRUMENT
            )/:rexdb
        parental_relationship:
          type: branch
          parent: subject

  - id: linked_assessment_alltypes
    description: Load a Mart with a table and a (more complicated) Assessment and link them
    deploy: !include simple_subject.yaml
    post_deploy_scripts:
      - script: !include/str subject.htsql
        type: htsql
    assessments:
      - instrument: alltypes
        selector: |
          /assessment{
            id() :as assessment_uid,
            subject.id() :as subject,
            evaluation_date
          }.filter(
            instrumentversion.instrument='alltypes'
          )/:rexdb
        parental_relationship:
          type: branch
          parent: subject

  - id: calculated_assessment
    description: Load a Mart with some post-load calculations
    assessments:
      - instrument: mart1
        selector: |
          /assessment{
            id() :as assessment_uid
          }.filter(
            instrumentversion.instrument='mart1'
          )/:rexdb
        post_load_calculations:
          - name: postcalc1
            type: text
            expression: upper(assessment_uid) + '-1'
          - name: postcalc2
            type: text
            expression: upper(assessment_uid) + '-2'
          - name: postcalc3
            type: text
            expression: upper(assessment_uid) + '-3'

  - id: overlap_names_assessment
    description: Load an Assessment that has field names that overlap special column names
    deploy: !include simple_subject.yaml
    post_deploy_scripts:
      - script: !include/str subject.htsql
        type: htsql
    assessments:
      - instrument: mart12
        selector:
          query: |
            /assessment{
              id() :as assessment_uid,
              subject.id() :as subject
            }.filter(
              instrumentversion.instrument=$INSTRUMENT
            )/:rexdb
        parental_relationship:
          type: branch
          parent: subject

  - id: select_json
    description: An Assessment selector that includes a JSON field
    deploy:
      - table: driver
        with:
          - column: assessment_uid
            type: text
          - column: a_json_field
            type: json
          - column: a_fake_json_field
            type: text
          - identity: [assessment_uid]
    post_deploy_scripts:
      - script: |
          /assessment{
              uid :as assessment_uid,
              string(calculation) :as a_json_field,
              data :as a_fake_json_field
            }.filter(
              instrumentversion.instrument='mart8'
            ) :as driver
            /:rexdb
            /:insert
        type: htsql
    assessments:
      - instrument: mart8
        selector: /driver

  - id: broken_selector
    description: Definition with a broken Assessment selector
    assessments:
      - instrument: mart1
        selector: |
          /assessment{
            id()
          }.filter(
            instrumentversion.instrument='mart1'
          )/:rexdb

  - id: datadictionary_deployment
    description: A mart with an empty table and a data dictionary
    deploy: !include simple_deploy.yaml
    processors:
      - id: datadictionary
        options:
          table_descriptions: |
            name,title,description
            foo,,A Description
            doesntexist,Does Not Exist,
          column_descriptions: |
            table,name,title,description
            foo,col2,,Test Description
            doesntexist,col1,
            foo,doesntexist,Blah

  - id: datadictionary_assessment
    description: A mart with an Assessment and a data dictionary
    deploy: !include simple_subject.yaml
    post_deploy_scripts:
      - script: !include/str subject.htsql
        type: htsql
    assessments:
      - instrument: mart1
        selector: |
          /assessment{
            id() :as assessment_uid,
            subject.id() :as subject,
            subject.id() :as 'My Cool Field'
          }.filter(
            instrumentversion.instrument=$INSTRUMENT
          )/:rexdb
        parental_relationship:
          type: branch
          parent: subject
    processors:
      - id: datadictionary
        options:
          table_descriptions: |
            name,title,description
            subject,,CUSTOM SUBJECT DESCRIPTION!
          column_descriptions: |
            table,name,title,description,source,datatype
            subject,mobile_tn,Title Number 2,,THE SOURCE
            mart1,assessment_uid,,the UID of the Assessment,,code

  - id: datadictionary_alltypes
    description: A mart with a more involved Assessment and data dictionary
    assessments:
      - instrument: alltypes
        selector: |
          /assessment{
            id() :as assessment_uid
          }.filter(
            instrumentversion.instrument=$INSTRUMENT
          )/:rexdb
    processors:
      - id: datadictionary

  - id: index_processor
    description: A mart with an empty table that uses the index processor
    deploy: !include simple_deploy.yaml
    processors:
      - id: index
        options:
          indexes:
            - table: foo
              columns: col2
            - table: foo
              columns:
                - col1
                - col2
              unique: true
            - table: foo
              columns: (upper(col1))
              partial: col2 = 'foo'

  - id: analyze_processor
    description: A mart with an empty table that uses the analyze processor
    deploy: !include simple_deploy.yaml
    processors:
      - id: analyze

  - id: enum_values
    description: Load Assessments that have enumeration/enumerationSet values with atypical enumeration choices
    assessments:
      - instrument: mart13
        selector: |
          /assessment{
            id() :as assessment_uid
          }.filter(
            instrumentversion.instrument=$INSTRUMENT
          )/:rexdb

  - id: some_parameters
    description: Shows everywhere that the parameters can be used
    parameters:
      - name: foo
        type: text
        default: somefoo
      - name: bar
        type: integer
    deploy: !include simple_deploy.yaml
    post_deploy_scripts:
      - script: !include/str params2_etl.htsql
        type: htsql
        parameters:
          prefix: h1
      - script: !include/str params2_etl.sql
        type: sql
        parameters:
          prefix: s1
    assessments:
      - instrument: mart1
        selector: |
          /assessment{
            id() :as assessment_uid,
            $foo :as param_foo,
            $bar :as param_bar
          }.filter(
            instrumentversion.instrument=$INSTRUMENT
          )/:rexdb
        post_load_calculations:
          - name: postcalc1
            type: text
            expression: upper(assessment_uid) + '-' + $foo
    post_assessment_scripts:
      - script: !include/str params2_etl.htsql
        type: htsql
        parameters:
          prefix: h2
      - script: !include/str params2_etl.sql
        type: sql
        parameters:
          prefix: s2

