title: Validating utilities
tests:

- title: AnyVal
  tests:
  - py: |
      # Define any_val
      from rex.core import AnyVal
      any_val = AnyVal()
  - py: any_val(object())
    ignore: at.(0x[0-9a-f]+)

- title: MaybeVal
  tests:
  - py: |
      # Define maybe_val
      from rex.core import MaybeVal, IntVal
      maybe_val = MaybeVal(IntVal())
  - py: maybe_val(10)
  - py: maybe_val(None) is None
  - py: maybe_val('NaN')
    except: Error

- title: OneOfVal
  tests:
  - py: |
      # Define oneof_val
      from rex.core import OneOfVal, BoolVal, IntVal
      oneof_val = OneOfVal(BoolVal(), IntVal())
  - py: oneof_val('1')
  - py: oneof_val('10')
  - py: oneof_val('NaN')
    except: Error

- title: StrVal
  tests:
  - py: |
      # Define str_val, ssn_val
      from rex.core import StrVal
      str_val = StrVal()
      ssn_val = StrVal('^\d\d\d-\d\d-\d\d\d\d$')
  - py: str_val('Hello')
  - py: str_val(u'Hello')
  - py: str_val(u'\N{CYRILLIC CAPITAL LETTER YA}')
  - py: str_val(u'\N{CYRILLIC CAPITAL LETTER YA}'.encode('utf-8'))
  - py: str_val(u'\N{CYRILLIC CAPITAL LETTER YA}'.encode('cp1251'))
    except: Error
  - py: ssn_val('123-12-1234')
  - py: ssn_val('John Doe')
    except: Error

- title: ChoiceVal
  tests:
  - py: |
      # Define choice_val
      from rex.core import ChoiceVal
      choice_val = ChoiceVal('one', 'two', 'three')
  - py: choice_val('two')
  - py: choice_val(u'two')
  - py: choice_val(2)
    except: Error
  - py: choice_val('five')
    except: Error

- title: BoolVal
  tests:
  - py: |
      # Define bool_val
      from rex.core import BoolVal
      bool_val = BoolVal()
  - py: bool_val(False)
  - py: bool_val(0)
  - py: bool_val('0')
  - py: bool_val('false')
  - py: bool_val(True)
  - py: bool_val(1)
  - py: bool_val('1')
  - py: bool_val('true')
  - py: bool_val(None)
    except: Error

- title: IntVal, PIntVal, UIntVal
  tests:
  - py: |
      # Define int_val, int_1to10val, etc
      from rex.core import IntVal, PIntVal, UIntVal
      int_val = IntVal()
      int_1to10_val = IntVal(1, 10)
      int_1to_val = IntVal(min_bound=1)
      int_to10_val = IntVal(max_bound=10)
      pint_val = PIntVal()
      uint_val = UIntVal()
  - py: int_val(10)
  - py: int_val(10L)
  - py: int_val('10')
  - py: int_val('NaN')
    except: Error
  - py: int_val(None)
    except: Error
  - py: int_1to10_val(1)
  - py: int_1to10_val(5)
  - py: int_1to10_val(10)
  - py: int_1to10_val(0)
    except: Error
  - py: int_1to10_val(11)
    except: Error
  - py: int_1to_val(1)
  - py: int_1to_val(0)
    except: Error
  - py: int_to10_val(10)
  - py: int_to10_val(11)
    except: Error
  - py: pint_val(1)
  - py: pint_val(0)
    except: Error
  - py: uint_val(0)
  - py: uint_val(-1)
    except: Error

- title: SeqVal
  tests:
  - py: |
      # Define seq_val, int_seq_val
      from rex.core import SeqVal, IntVal
      seq_val = SeqVal()
      int_seq_val = SeqVal(IntVal())
  - py: seq_val([0, False, None])
  - py: seq_val(None)
    except: Error
  - py: int_seq_val([])
  - py: int_seq_val(['1', '2', '3'])
  - py: int_seq_val([1, '2', 'three'])
    except: Error

- title: MapVal
  tests:
  - py: |
      # Define map_val, i2b_map_val, pi2b_map_val, i2i_map_val
      from rex.core import MapVal, IntVal, PIntVal, BoolVal
      map_val = MapVal()
      i2b_map_val = MapVal(IntVal(), BoolVal())
      pi2b_map_val = MapVal(PIntVal(), BoolVal())
      i2i_map_val = MapVal(IntVal(), IntVal())
  - py: "map_val({'0': 'false'})"
  - py: map_val(None)
    except: Error
  - py: i2b_map_val({})
  - py: "i2b_map_val({'0': 'false'})"
  - py: "pi2b_map_val({'0': 'false'})"
    except: Error
  - py: "i2i_map_val({'0': 'false'})"
    except: Error

- title: FileVal, DirectoryVal
  tests:
  - py: |
      # Define file_val, dir_val
      from rex.core import FileVal, DirectoryVal
      file_val = FileVal()
      dir_val = DirectoryVal()
  - py: file_val('setup.py')
  - py: file_val(u'setup.py')
  - py: file_val('missing')
    except: Error
  - py: file_val('src')
    except: Error
  - py: file_val(None)
    except: Error
  - py: dir_val('src')
  - py: dir_val(u'src')
  - py: dir_val('missing')
    except: Error
  - py: dir_val('setup.py')
    except: Error
  - py: dir_val(None)
    except: Error

