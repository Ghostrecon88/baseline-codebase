#
# This file contains expected test output data generated by PBBT.
#
---
suite: all
tests:
- py: test/test_validate_pbbt.py
  stdout: |
    ### test_any()
    AnyVal()('X'): 'X'
    ### test_maybe()
    MaybeVal(IntVal())(10): 10
    MaybeVal(IntVal())(None): None
    MaybeVal(IntVal())('NaN') raises:
    Error: Expected an integer
    Got:
        'NaN'
    ### test_oneof()
    OneofVal(BoolVal(), IntVal())('1'): True
    OneofVal(BoolVal(), IntVal())('10'): 10
    OneOfVal(BoolVal(), IntVal())(<invalid value>) raises:
    Error: Failed to match the value against any of the following:
        Expected a Boolean value
        Got:
            'NaN'

        Expected an integer
        Got:
            'NaN'
    ### test_str()
    StrVal()('Hello'): 'Hello'
    StrVal()(<UTF-8 string>): '\xd0\x9f\xd1\x80\xd0\xb8\xd0\xb2\xd0\xb5\xd1\x82'
    StrVal()(<Unicode string>): '\xd0\x9f\xd1\x80\xd0\xb8\xd0\xb2\xd0\xb5\xd1\x82'
    StrVal()(<non-UTF8 string>) raises:
    Error: Expected a valid UTF-8 string
    Got:
        '\xcf\xf0\xe8\xe2\xe5\xf2'
    StrVal()(<not a string>) raises:
    Error: Expected a string
    Got:
        None
    StrVal(<SSN>)('123-12-1234'): '123-12-1234'
    StrVal(<SSN>)(<not a SSN>) raises:
    Error: Expected a string matching:
        /^\d\d\d-\d\d-\d\d\d\d$/
    Got:
        'Hello'
    ### test_choice()
    ChoiceVal(...)(<choice>): 'two'
    ChoiceVal(...)(<choice as Unicode string>): 'two'
    ChoiceVal(...)(<non-string>) raises:
    Error: Expected a string
    Got:
        2
    ChoiceVal(...)(<not a choice>) raises:
    Error: Expected one of:
        one, two, three
    Got:
        'five'
    ### test_bool()
    BoolVal()(False): False
    BoolVal()(0): False
    BoolVal()(''): False
    BoolVal()('false'): False
    BoolVal()(True): True
    BoolVal()(1): True
    BoolVal()('1'): True
    BoolVal()('true'): True
    BoolVal()(<not a Boolean>) raises:
    Error: Expected a Boolean value
    Got:
        None
    ### test_int()
    IntVal()(-10): -10
    IntVal()(1L): 1L
    IntVal()('-10'): -10
    IntVal()(<not a number>) raises:
    Error: Expected an integer
    Got:
        None
    IntVal()(<non-numeric string>) raises:
    Error: Expected an integer
    Got:
        'NaN'
    IntVal()(<Boolean>) raises:
    Error: Expected an integer
    Got:
        True
    IntVal()(<float>) raises:
    Error: Expected an integer
    Got:
        1.0
    IntVal(1, 10)(1): 1
    IntVal(1, 10)(5): 5
    IntVal(1, 10)(10): 10
    IntVal(1, 10)(0) raises:
    Error: Expected an integer in range:
        [1..10]
    Got:
        0
    IntVal(1, 10)(11) raises:
    Error: Expected an integer in range:
        [1..10]
    Got:
        11
    IntVal(1, None)(1): 1
    IntVal(1, None)(0) raises:
    Error: Expected an integer in range:
        [1..]
    Got:
        0
    IntVal(None, 10)(10): 10
    IntVal(None, 10)(11) raises:
    Error: Expected an integer in range:
        [..10]
    Got:
        11
    PIntVal()(1): 1
    PIntVal()(0) raises:
    Error: Expected an integer in range:
        [1..]
    Got:
        0
    UIntVal()(0): 0
    UIntVal()(-1) raises:
    Error: Expected an integer in range:
        [0..]
    Got:
        -1
    ### test_seq()
    SeqVal()([0, False, None]): [0, False, None]
    SeqVal()(<non-sequence>) raises:
    Error: Expected a sequence
    Got:
        None
    SeqVal(IntVal())(range(10)): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    SeqVal(IntVal())([]): []
    SeqVal(IntVal())(<non-integer sequence>) raises:
    Error: Expected an integer
    Got:
        None
    While validating sequence item
        #2
    ### test_map()
    MapVal()({'1': 'true', '0': 'false'}): {'1': 'true', '0': 'false'}
    MapVal()(<non-mapping>) raises:
    Error: Expected a mapping
    Got:
        None
    MapVal(IntVal(), BoolVal())({}): {}
    MapVal(IntVal(), BoolVal())({'1': 'true', '0': 'false'}): {0: False, 1: True}
    MapVal(...)(<mapping with non-conforming keys>) raises:
    Error: Expected an integer in range:
        [1..]
    Got:
        '0'
    While validating mapping key:
        '0'
    MapVal(...)(<mapping with non-conforming values>) raises:
    Error: Expected an integer
    Got:
        'false'
    While validating mapping value for key:
        0
    ### test_file()
    FileVal()('setup.py'): 'setup.py'
    FileVal()(u'setup.py'): 'setup.py'
    FileVal()(<not a string>) raises:
    Error: Expected a string
    Got:
        None
    FileVal()(<not an existing file>) raises:
    Error: Cannot find file:
        invalid.py
    FileVal()(<not a file>) raises:
    Error: Cannot find file:
        test
    ### test_directory()
    DirectoryVal()('test'): 'test'
    DirectoryVal()(u'test'): 'test'
    DirectoryVal()(<not a string>) raises:
    Error: Expected a string
    Got:
        None
    DirectoryVal()(<not an existing directory>) raises:
    Error: Cannot find directory:
        invalid
    DirectoryVal()(<not a directory>) raises:
    Error: Cannot find directory:
        setup.py
