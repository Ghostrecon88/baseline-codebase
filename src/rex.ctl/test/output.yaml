#
# This file contains expected test output data generated by PBBT.
#
---
suite: rex.ctl
tests:
- sh: ln -s ../test/rex-helper ./sandbox/rex
  stdout: ''
- sh: pip install -q -e ./demo/rex.ctl_demo
  stdout: ''
- suite: python-m-rex.ctl
  tests:
  - py: simulate-python-m-rex.ctl-invocation
    stdout: |
      Rex - Command-line administration utility for the RexDB platform
      Usage: __main__.py [<settings>...] <task> [<arguments>...]

      Run __main__.py help for general usage and a list of tasks and settings.
      Run __main__.py help <topic> for help on a specific task or setting.
- suite: rex-help
  tests:
  - sh: ./sandbox/rex
    stdout: |
      Rex - Command-line administration utility for the RexDB platform
      Usage: rex [<settings>...] <task> [<arguments>...]

      Run rex help for general usage and a list of tasks and settings.
      Run rex help <topic> for help on a specific task or setting.
  - sh: ./sandbox/rex help
    stdout: |+
      Rex - Command-line administration utility for the RexDB platform
      Usage: rex [<settings>...] <task> [<arguments>...]

      Run rex help for general usage and a list of tasks,
      settings and other help topics.

      Run rex help <topic> for help on a specific topic.

      Available tasks:
        help [<topic>]           : display help on tasks and settings
        serve [<project>]        : start an HTTP server
        wsgi [<project>]         : generate a WSGI script

      Settings:
        --debug                  : print debug information
        --http-host=HOSTNAME     : HTTP server address
        --http-port=PORT         : HTTP server port
        --parameters=CONFIG      : application configuration
        --project=NAME           : primary package
        --requirements=NAMES     : additional application components

      Other topics:
        packages                 : list application components
        settings                 : list configuration parameters

  - sh: ./sandbox/rex help serve
    stdout: |+
      SERVE - start an HTTP server
      Usage: rex serve [<project>]

      The serve task starts an HTTP server to serve a RexDB application.

      This task takes one argument: the name of the primary RexDB package.
      Alternatively, the package could be specified using project setting.

      Use option --require or setting requirements to specify additional
      packages to include with the application.

      Use option --set or setting parameters to specify configuration
      parameters of the application.

      Use options --host and --port or settings http-host and http-port
      to specify the address and the port number for the HTTP server.
      If neither are set, the server is started on 127.0.0.1:8080.

      By default, the server dumps HTTP logs in Apache Common Log Format
      to stdout.  Use option --quiet to suppress this output.  Unhandled
      application exceptions are dumped to stderr.

      Toggle debug setting to run the application in debug mode and report
      unhandled exceptions to the client.

      Options:
        --require=PACKAGE        : include an additional package
        --set=PARAM=VALUE        : set a configuration parameter
        -h/--host=HOSTNAME       : bind to the specified host
        -p/--port=PORT           : bind to the specified port
        -q/--quiet               : suppress HTTP logs

  - sh: ./sandbox/rex help wsgi
    stdout: |+
      WSGI - generate a WSGI script
      Usage: rex wsgi [<project>]

      The wsgi task generates a WSGI script for a RexDB application, which
      could be used with uwsgi, mod_wsgi or any other WSGI container.

      This task takes one argument: the name of the primary RexDB package.
      Alternatively, the package could be specified using project setting.

      Use option --require or setting requirements to specify additional
      packages to include with the application.

      Use option --set or setting parameters to specify configuration
      parameters of the application.

      Use option --output to specify where to write the generated script.

      Options:
        --require=PACKAGE        : include an additional package
        --set=PARAM=VALUE        : set a configuration parameter
        -o/--output=FILE         : write the script to a file

  - sh: ./sandbox/rex help http-host
    stdout: |+
      HTTP-HOST - HTTP server address
      Usage: rex --http-host=HOSTNAME
             http-host: HOSTNAME (rex.yaml)
             REX_HTTP_HOST=HOSTNAME (environment)

      The default address of the HTTP server.

  - sh: ./sandbox/rex help http-port
    stdout: |+
      HTTP-PORT - HTTP server port
      Usage: rex --http-port=PORT
             http-port: PORT (rex.yaml)
             REX_HTTP_PORT=PORT (environment)

      The default port number for the HTTP server.

  - sh: ./sandbox/rex help project
    stdout: |+
      PROJECT - primary package
      Usage: rex --project=NAME
             project: NAME (rex.yaml)
             REX_PROJECT=NAME (environment)

      The primary package of the application.

  - sh: ./sandbox/rex help requirements
    stdout: |+
      REQUIREMENTS - additional application components
      Usage: rex --requirements=NAMES
             requirements: NAMES (rex.yaml)
             REX_REQUIREMENTS=NAMES (environment)

      Additional packages to include with the application.

  - sh: ./sandbox/rex help parameters
    stdout: |+
      PARAMETERS - application configuration
      Usage: rex --parameters=CONFIG
             parameters: CONFIG (rex.yaml)
             REX_PARAMETERS=CONFIG (environment)

      A dictionary with application parameters.

- suite: rex-serve
  tests:
  - suite: run-with-no-project
    tests:
    - sh: ./sandbox/rex --daemon serve
      stdout: ''
    - sh: ./sandbox/rex --get /
      stdout: |
        HTTP/1.0 404 Not Found
        Date: Wed, 10 Jul 2013 19:31:41 GMT
        Content-Length: 41
        Content-Type: text/plain

        Application does not provide web access.
    - sh: ./sandbox/rex --kill serve
      stdout: |+
        Serving on 127.0.0.1:8080
        localhost - - [13/Jun/2013 22:22:49] "GET / HTTP/1.1" 404 41

  - suite: run-with-a-project
    tests:
    - sh: ./sandbox/rex --daemon serve rex.ctl_demo
      stdout: ''
    - sh: ./sandbox/rex --get /
      stdout: |
        HTTP/1.0 200 OK
        Date: Wed, 10 Jul 2013 19:31:51 GMT
        Content-Length: 55
        Content-Type: text/html; charset=UTF-8

        <!DOCTYPE html>
        <title>Welcome to REX.CTL_DEMO!</title>
    - sh: ./sandbox/rex --kill serve rex.ctl_demo
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [13/Jun/2013 22:22:50] "GET / HTTP/1.1" 200 55

  - suite: using-require-option
    tests:
    - sh: ./sandbox/rex --daemon serve rex.ctl_demo --require ../test/data/shared/
      stdout: ''
    - sh: ./sandbox/rex --get /
      stdout: |
        HTTP/1.0 200 OK
        Date: Wed, 10 Jul 2013 19:31:59 GMT
        Content-Length: 55
        Content-Type: text/html; charset=UTF-8

        <!DOCTYPE html>
        <title>Welcome to REX.CTL_DEMO!</title>
    - sh: ./sandbox/rex --get /shared/shared.css
      stdout: |+
        HTTP/1.0 200 OK
        Date: Wed, 10 Jul 2013 19:32:00 GMT
        Last-Modified: Fri, 14 Jun 2013 01:21:00 GMT
        Content-Length: 49
        Content-Type: text/css; charset=UTF-8
        Accept-Ranges: bytes


        body {
          font-family: 'Comic Sans', cursive;
        }

    - sh: ./sandbox/rex --kill serve rex.ctl_demo --require ../test/data/shared/
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [13/Jun/2013 22:22:51] "GET / HTTP/1.1" 200 55
        localhost - - [13/Jun/2013 22:22:51] "GET /shared/shared.css HTTP/1.1" 200 49

  - suite: using-set-option
    tests:
    - sh: ./sandbox/rex --daemon serve rex.ctl_demo --set hello_access=anybody
      stdout: ''
    - sh: ./sandbox/rex --get /hello
      stdout: |
        HTTP/1.0 200 OK
        Date: Wed, 10 Jul 2013 19:32:03 GMT
        Content-Length: 13
        Content-Type: text/plain; charset=UTF-8

        Hello, World!
    - sh: ./sandbox/rex --kill serve rex.ctl_demo --set hello_access=anybody
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [13/Jun/2013 22:22:51] "GET /hello HTTP/1.1" 200 13

  - suite: invalid-requirement-or-parameter
    tests:
    - sh: ./sandbox/rex serve rex.ctl_demo --require unknown-package
      stdout: |+
        FATAL ERROR: Failed to satisfy requirement:
            unknown-package
        While initializing RexDB application:
            rex.ctl_demo
            unknown-package

    - sh: ./sandbox/rex serve rex.ctl_demo --set unknown-parameter=true
      stdout: |+
        FATAL ERROR: Got unknown setting:
            unknown-parameter
        While initializing RexDB application:
            rex.ctl_demo
        With parameters:
            unknown-parameter: 'true'

  - suite: server-address-with-http-host-and-http-port
    tests:
    - sh: ./sandbox/rex --daemon --http-host=localhost --http-port=8088 serve rex.ctl_demo
      stdout: ''
    - sh: ./sandbox/rex --get http://localhost:8088/
      stdout: |
        HTTP/1.0 200 OK
        Date: Wed, 10 Jul 2013 19:32:08 GMT
        Content-Length: 55
        Content-Type: text/html; charset=UTF-8

        <!DOCTYPE html>
        <title>Welcome to REX.CTL_DEMO!</title>
    - sh: ./sandbox/rex --kill --http-host=localhost --http-port=8088 serve rex.ctl_demo
      stdout: |+
        Serving rex.ctl_demo on localhost:8088
        localhost - - [13/Jun/2013 22:22:53] "GET / HTTP/1.1" 200 55

  - suite: server-address-with-host-and-port
    tests:
    - sh: ./sandbox/rex --daemon --http-host=localhost --http-port=8088 serve rex.ctl_demo
        -h 127.0.0.1 -p 8080
      stdout: ''
    - sh: ./sandbox/rex --get /
      stdout: |
        HTTP/1.0 200 OK
        Date: Wed, 10 Jul 2013 19:32:10 GMT
        Content-Length: 55
        Content-Type: text/html; charset=UTF-8

        <!DOCTYPE html>
        <title>Welcome to REX.CTL_DEMO!</title>
    - sh: ./sandbox/rex --kill --http-host=localhost --http-port=8088 serve rex.ctl_demo
        -h 127.0.0.1 -p 8080
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [13/Jun/2013 22:22:54] "GET / HTTP/1.1" 200 55

  - suite: invalid-http-host-and-http-port
    tests:
    - sh: ./sandbox/rex serve
      stdout: |+
        FATAL ERROR: invalid value for setting --http-host: expected a host name or an IP address

    - sh: ./sandbox/rex serve
      stdout: |
        Serving on 256.56.6.0:8080
        [Errno -2] Name or service not known
    - sh: ./sandbox/rex serve
      stdout: |+
        FATAL ERROR: invalid value for setting --http-port: expected a port number

    - sh: ./sandbox/rex serve
      stdout: |+
        FATAL ERROR: invalid value for setting --http-port: invalid literal for int() with base 10: 'localhost'

    - sh: ./sandbox/rex serve
      stdout: |+
        FATAL ERROR: invalid value for setting --http-port: expected a port number

    - sh: ./sandbox/rex serve
      stdout: |
        Serving on 127.0.0.1:80
        [Errno 13] Permission denied
  - suite: http-auth
    tests:
    - sh: ./sandbox/rex --daemon serve rex.ctl_demo
      stdout: ''
    - sh: ./sandbox/rex --get http://Aladdin@localhost:8080/
      stdout: |
        HTTP/1.0 200 OK
        Date: Wed, 10 Jul 2013 19:32:14 GMT
        Content-Length: 55
        Content-Type: text/html; charset=UTF-8

        <!DOCTYPE html>
        <title>Welcome to REX.CTL_DEMO!</title>
    - sh: ./sandbox/rex --get http://Aladdin:open%20sesame@localhost:8080/
      stdout: |
        HTTP/1.0 200 OK
        Date: Wed, 10 Jul 2013 19:32:16 GMT
        Content-Length: 55
        Content-Type: text/html; charset=UTF-8

        <!DOCTYPE html>
        <title>Welcome to REX.CTL_DEMO!</title>
    - sh: ./sandbox/rex --kill serve rex.ctl_demo
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [13/Jun/2013 22:22:56] "GET / HTTP/1.1" 200 55
        localhost - Aladdin [13/Jun/2013 22:22:56] "GET / HTTP/1.1" 200 55

  - suite: unhandled-exceptions
    tests:
    - sh: ./sandbox/rex --daemon serve rex.ctl_demo
      stdout: ''
    - sh: ./sandbox/rex --get /
      stdout: |
        HTTP/1.0 200 OK
        Date: Wed, 10 Jul 2013 19:32:17 GMT
        Content-Length: 55
        Content-Type: text/html; charset=UTF-8

        <!DOCTYPE html>
        <title>Welcome to REX.CTL_DEMO!</title>
    - sh: ./sandbox/rex --get /error
      stdout: |
        HTTP/1.0 500 Internal Server Error
        Date: Wed, 10 Jul 2013 19:32:18 GMT
        Content-Length: 59
        Content-Type: text/plain

        A server error occurred.  Please contact the administrator.
    - sh: ./sandbox/rex --kill serve rex.ctl_demo
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [13/Jun/2013 22:22:57] "GET / HTTP/1.1" 200 55
        ----------------------------------------------------------------------
        [2013-06-13 22:22:57.538785] localhost => http://127.0.0.1:8080/error
        Traceback (most recent call last):
          File "/usr/lib/python2.7/wsgiref/handlers.py", line 85, in run
            self.result = application(self.environ, self.start_response)
          File "/home/xi/xitology/prometheus/rex/rex.core-opensource/src/rex/core/application.py", line 84, in __call__
            output = wsgi(environ, start_response)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 328, in __call__
            resp = self.handler(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 110, in __call__
            resp = self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 140, in __call__
            return self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 174, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 253, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 271, in __call__
            return handler(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/command.py", line 69, in __call__
            return self.render(req, **arguments)
          File "/home/xi/xitology/prometheus/rex/rex.ctl-opensource/demo/rex.ctl_demo/src/rex/ctl_demo.py", line 36, in render
            raise RuntimeError("some unexpected problem occurred")
        RuntimeError: some unexpected problem occurred
        localhost - - [13/Jun/2013 22:22:57] "GET /error HTTP/1.1" 500 59

  - suite: unhandled-exceptions-with-debug
    tests:
    - sh: ./sandbox/rex --daemon serve rex.ctl_demo --debug
      stdout: ''
    - sh: ./sandbox/rex --get /
      stdout: |
        HTTP/1.0 200 OK
        Date: Wed, 10 Jul 2013 19:32:19 GMT
        Content-Length: 55
        Content-Type: text/html; charset=UTF-8

        <!DOCTYPE html>
        <title>Welcome to REX.CTL_DEMO!</title>
    - sh: ./sandbox/rex --get /error
      stdout: |
        HTTP/1.0 500 Internal Server Error
        Date: Wed, 10 Jul 2013 19:32:20 GMT
        Content-Type: text/plain

        A server error occurred.  Please contact the administrator.

        [2013-07-10 14:32:20.099429] localhost => http://127.0.0.1:8080/error
        Traceback (most recent call last):
          File "/usr/lib/python2.7/wsgiref/handlers.py", line 85, in run
            self.result = application(self.environ, self.start_response)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.core-opensource/src/rex/core/application.py", line 84, in __call__
            output = wsgi(environ, start_response)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 328, in __call__
            resp = self.handler(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 110, in __call__
            resp = self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 140, in __call__
            return self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 174, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 253, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 271, in __call__
            return handler(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/command.py", line 75, in __call__
            return self.render(req, **arguments)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.ctl-opensource/demo/rex.ctl_demo/src/rex/ctl_demo.py", line 35, in render
            raise RuntimeError("some unexpected problem occurred")
        RuntimeError: some unexpected problem occurred
    - sh: ./sandbox/rex --kill serve rex.ctl_demo --debug
      stdout: |
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [13/Jun/2013 22:22:58] "GET / HTTP/1.1" 200 55
        ----------------------------------------------------------------------
        [2013-06-13 22:22:58.319316] localhost => http://127.0.0.1:8080/error
        Traceback (most recent call last):
          File "/usr/lib/python2.7/wsgiref/handlers.py", line 85, in run
            self.result = application(self.environ, self.start_response)
          File "/home/xi/xitology/prometheus/rex/rex.core-opensource/src/rex/core/application.py", line 84, in __call__
            output = wsgi(environ, start_response)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 328, in __call__
            resp = self.handler(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 110, in __call__
            resp = self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 140, in __call__
            return self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 174, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 253, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 271, in __call__
            return handler(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/command.py", line 69, in __call__
            return self.render(req, **arguments)
          File "/home/xi/xitology/prometheus/rex/rex.ctl-opensource/demo/rex.ctl_demo/src/rex/ctl_demo.py", line 36, in render
            raise RuntimeError("some unexpected problem occurred")
        RuntimeError: some unexpected problem occurred
        localhost - - [13/Jun/2013 22:22:58] "GET /error HTTP/1.1" 500 1620
  - suite: handling-invalid-requests
    tests:
    - sh: ./sandbox/rex --daemon serve rex.ctl_demo --debug
      stdout: ''
    - sh: ./sandbox/rex --get '/invalid /request'
      stdout: "HTTP/0.9 200 \n\n<head>\n<title>Error response</title>\n</head>\n<body>\n<h1>Error
        response</h1>\n<p>Error code 400.\n<p>Message: Bad request syntax ('GET /invalid
        /request HTTP/1.1').\n<p>Error code explanation: 400 = Bad request syntax
        or unsupported method.\n</body>\n"
    - sh: ./sandbox/rex --kill serve rex.ctl_demo --debug
      stdout: |
        Serving rex.ctl_demo on 127.0.0.1:8080
        Invalid request: code 400, message Bad request syntax ('GET /invalid /request HTTP/1.1')
        localhost - - [22/Jul/2013 13:21:53] "GET /invalid /request HTTP/1.1" 400 -
  - suite: using-quiet-option
    tests:
    - sh: ./sandbox/rex --daemon serve rex.ctl_demo --quiet
      stdout: ''
    - sh: ./sandbox/rex --get /
      stdout: |
        HTTP/1.0 200 OK
        Date: Wed, 10 Jul 2013 19:32:28 GMT
        Content-Length: 55
        Content-Type: text/html; charset=UTF-8

        <!DOCTYPE html>
        <title>Welcome to REX.CTL_DEMO!</title>
    - sh: ./sandbox/rex --get /error
      stdout: |
        HTTP/1.0 500 Internal Server Error
        Date: Wed, 10 Jul 2013 19:32:28 GMT
        Content-Length: 59
        Content-Type: text/plain

        A server error occurred.  Please contact the administrator.
    - sh: ./sandbox/rex --kill serve rex.ctl_demo --quiet
      stdout: |+
        ----------------------------------------------------------------------
        [2013-06-13 22:22:59.110596] localhost => http://127.0.0.1:8080/error
        Traceback (most recent call last):
          File "/usr/lib/python2.7/wsgiref/handlers.py", line 85, in run
            self.result = application(self.environ, self.start_response)
          File "/home/xi/xitology/prometheus/rex/rex.core-opensource/src/rex/core/application.py", line 84, in __call__
            output = wsgi(environ, start_response)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 328, in __call__
            resp = self.handler(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 110, in __call__
            resp = self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 140, in __call__
            return self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 174, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 253, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/route.py", line 271, in __call__
            return handler(req)
          File "/home/xi/xitology/prometheus/rex/rex.web-opensource/src/rex/web/command.py", line 69, in __call__
            return self.render(req, **arguments)
          File "/home/xi/xitology/prometheus/rex/rex.ctl-opensource/demo/rex.ctl_demo/src/rex/ctl_demo.py", line 36, in render
            raise RuntimeError("some unexpected problem occurred")
        RuntimeError: some unexpected problem occurred

- suite: rex-wsgi
  tests:
  - suite: requirements-and-parameters
    tests:
    - sh: ./sandbox/rex wsgi
      stdout: |2+

        # WSGI script for a RexDB application.
        # Use it with `uwsgi`, `mod_wsgi` or any other WSGI container.

        from rex.core import Rex

        requirements = [
        ]

        parameters = {
        }

        application = Rex(*requirements, **parameters)

    - sh: ./sandbox/rex wsgi rex.ctl_demo
      stdout: |2+

        # WSGI script for the `rex.ctl_demo` application.
        # Use it with `uwsgi`, `mod_wsgi` or any other WSGI container.

        from rex.core import Rex

        requirements = [
            'rex.ctl_demo',
        ]

        parameters = {
        }

        application = Rex(*requirements, **parameters)

    - sh: ./sandbox/rex wsgi rex.ctl_demo --require ../test/data/shared/
      stdout: |2+

        # WSGI script for the `rex.ctl_demo` application.
        # Use it with `uwsgi`, `mod_wsgi` or any other WSGI container.

        from rex.core import Rex

        requirements = [
            'rex.ctl_demo',
            '../test/data/shared/',
        ]

        parameters = {
        }

        application = Rex(*requirements, **parameters)

    - sh: ./sandbox/rex wsgi rex.ctl_demo --set hello_access=anybody
      stdout: |2+

        # WSGI script for the `rex.ctl_demo` application.
        # Use it with `uwsgi`, `mod_wsgi` or any other WSGI container.

        from rex.core import Rex

        requirements = [
            'rex.ctl_demo',
        ]

        parameters = {
            'hello_access': 'anybody',
        }

        application = Rex(*requirements, **parameters)

    - sh: ./sandbox/rex wsgi rex.ctl_demo --require unknown-package
      stdout: |+
        FATAL ERROR: Failed to satisfy requirement:
            unknown-package

    - sh: ./sandbox/rex wsgi rex.ctl_demo --set unknown-parameter=true
      stdout: |+
        FATAL ERROR: Got unknown setting:
            unknown-parameter

  - suite: using-output-option
    tests:
    - sh: ./sandbox/rex wsgi rex.ctl_demo -o ctl_demo.wsgi
      stdout: ''
    - read: ./sandbox/ctl_demo.wsgi
      data: |2+

        # WSGI script for the `rex.ctl_demo` application.
        # Use it with `uwsgi`, `mod_wsgi` or any other WSGI container.

        from rex.core import Rex

        requirements = [
            'rex.ctl_demo',
        ]

        parameters = {
        }

        application = Rex(*requirements, **parameters)

- suite: rex-help-packages
  tests:
  - suite: run-with-no-project
    tests:
    - sh: ./sandbox/rex help packages
      stdout: |+
        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.core-opensource/src
        Summary:
          Core components of the Rex platform
        URL:
          http://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

  - suite: run-with-a-project
    tests:
    - sh: ./sandbox/rex help packages --project rex.ctl_demo
      stdout: |+
        [rex.ctl_demo]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.ctl-opensource/demo/rex.ctl_demo/src
        Resources:
          /home/xi/xitology/prometheus/rex/rex.ctl-opensource/demo/rex.ctl_demo/static
        Dependencies:
          rex.web

        [rex.web]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.web-opensource/src
        Summary:
          Web stack for the Rex platform
        URL:
          http://bitbucket.org/prometheus/rex.web
        Dependencies:
          rex.core>=1.0,<2
          webob
          Jinja2
          pycrypto
          pbkdf2

        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.core-opensource/src
        Summary:
          Core components of the Rex platform
        URL:
          http://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

    - sh: ./sandbox/rex help packages --requirements rex.ctl_demo
      stdout: |+
        [rex.ctl_demo]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.ctl-opensource/demo/rex.ctl_demo/src
        Resources:
          /home/xi/xitology/prometheus/rex/rex.ctl-opensource/demo/rex.ctl_demo/static
        Dependencies:
          rex.web

        [rex.web]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.web-opensource/src
        Summary:
          Web stack for the Rex platform
        URL:
          http://bitbucket.org/prometheus/rex.web
        Dependencies:
          rex.core>=1.0,<2
          webob
          Jinja2
          pycrypto
          pbkdf2

        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.core-opensource/src
        Summary:
          Core components of the Rex platform
        URL:
          http://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

    - sh: ./sandbox/rex help packages --requirements '["rex.ctl_demo"]'
      stdout: |+
        [rex.ctl_demo]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.ctl-opensource/demo/rex.ctl_demo/src
        Resources:
          /home/xi/xitology/prometheus/rex/rex.ctl-opensource/demo/rex.ctl_demo/static
        Dependencies:
          rex.web

        [rex.web]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.web-opensource/src
        Summary:
          Web stack for the Rex platform
        URL:
          http://bitbucket.org/prometheus/rex.web
        Dependencies:
          rex.core>=1.0,<2
          webob
          Jinja2
          pycrypto
          pbkdf2

        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.core-opensource/src
        Summary:
          Core components of the Rex platform
        URL:
          http://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

  - suite: module-and-static-requirements
    tests:
    - sh: ./sandbox/rex help packages --requirements rex.core.application
      stdout: |+
        [rex.core.application]
        Location:
          /home/xi/xitology/prometheus/rex/rex.core-opensource/src/rex/core/application.pyc

        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.core-opensource/src
        Summary:
          Core components of the Rex platform
        URL:
          http://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

    - sh: ./sandbox/rex help packages --requirements ../test/data/shared/
      stdout: |+
        [shared]
        Resources:
          /home/xi/xitology/prometheus/rex/rex.ctl-opensource/test/data/shared

        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/rex.core-opensource/src
        Summary:
          Core components of the Rex platform
        URL:
          http://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

  - suite: ill-formed-requirements
    tests:
    - sh: ./sandbox/rex help packages --project rex.unknown
      stdout: |+
        FATAL ERROR: Failed to satisfy requirement:
            rex.unknown

    - sh: ./sandbox/rex help packages
      stdout: |+
        FATAL ERROR: invalid value for setting --project: expected a project name

    - sh: ./sandbox/rex help packages
      stdout: |+
        FATAL ERROR: invalid value for setting --requirements: expected a list of requirements

- suite: rex-help-settings
  tests:
  - suite: run-with-no-project
    tests:
    - sh: ./sandbox/rex help settings
      stdout: |+
        [debug]
        Declared in:
          rex.core
        Description:
          Turn on debug mode.

  - suite: run-with-a-project-and-parameters
    tests:
    - sh: ./sandbox/rex help settings --project rex.ctl_demo
      stdout: |+
        [debug]
        Declared in:
          rex.core
        Description:
          Turn on debug mode.

        [hello_access]
        Declared in:
          rex.ctl_demo
        Mandatory?
          true
        Preset in:
          rex.ctl_demo
        Value:
          'authenticated'
        Description:
          Permission to use the `/hello` command.

        [mount]
        Declared in:
          rex.web
        Description:
          Mount table that maps package names to path segments.

          For each package, this setting specifies the base URL segment
          for commands and static resources that belong to the package.
          The value of this setting is a dictionary; the keys are package
          names, the values are URL segments.

          Example::

              mount:
                  rex.web_demo:   /
                  rex.common:     /shared/

          It is not an error to omit some packages or the whole setting entirely.
          If the mount point for a package is not specified, it is determined
          as follows:

          1. The first package in the application requirement list is mounted
             at ``/``.
          2. Otherwise, a normalized package name is used as the mount point.

        [secret]
        Declared in:
          rex.web
        Preset in:
          rex.ctl_demo
        Value:
          'For the sake of demonstration only.  Normally, you would never preset this parameter.'
        Description:
          Secret passphrase for generating private keys.

          If not set, a random key is used. Must be set for a multi-process server.

    - sh: ./sandbox/rex help settings --project rex.ctl_demo --parameters 'debug hello_access=anybody'
      stdout: |+
        [debug]
        Declared in:
          rex.core
        Value:
          True
        Description:
          Turn on debug mode.

        [hello_access]
        Declared in:
          rex.ctl_demo
        Mandatory?
          true
        Value:
          'anybody'
        Description:
          Permission to use the `/hello` command.

        [mount]
        Declared in:
          rex.web
        Description:
          Mount table that maps package names to path segments.

          For each package, this setting specifies the base URL segment
          for commands and static resources that belong to the package.
          The value of this setting is a dictionary; the keys are package
          names, the values are URL segments.

          Example::

              mount:
                  rex.web_demo:   /
                  rex.common:     /shared/

          It is not an error to omit some packages or the whole setting entirely.
          If the mount point for a package is not specified, it is determined
          as follows:

          1. The first package in the application requirement list is mounted
             at ``/``.
          2. Otherwise, a normalized package name is used as the mount point.

        [secret]
        Declared in:
          rex.web
        Preset in:
          rex.ctl_demo
        Value:
          'For the sake of demonstration only.  Normally, you would never preset this parameter.'
        Description:
          Secret passphrase for generating private keys.

          If not set, a random key is used. Must be set for a multi-process server.

    - sh: ./sandbox/rex help settings --project rex.ctl_demo --parameters '{"debug":true,"hello_access":"anybody"}'
      stdout: |+
        [debug]
        Declared in:
          rex.core
        Value:
          True
        Description:
          Turn on debug mode.

        [hello_access]
        Declared in:
          rex.ctl_demo
        Mandatory?
          true
        Value:
          u'anybody'
        Description:
          Permission to use the `/hello` command.

        [mount]
        Declared in:
          rex.web
        Description:
          Mount table that maps package names to path segments.

          For each package, this setting specifies the base URL segment
          for commands and static resources that belong to the package.
          The value of this setting is a dictionary; the keys are package
          names, the values are URL segments.

          Example::

              mount:
                  rex.web_demo:   /
                  rex.common:     /shared/

          It is not an error to omit some packages or the whole setting entirely.
          If the mount point for a package is not specified, it is determined
          as follows:

          1. The first package in the application requirement list is mounted
             at ``/``.
          2. Otherwise, a normalized package name is used as the mount point.

        [secret]
        Declared in:
          rex.web
        Preset in:
          rex.ctl_demo
        Value:
          'For the sake of demonstration only.  Normally, you would never preset this parameter.'
        Description:
          Secret passphrase for generating private keys.

          If not set, a random key is used. Must be set for a multi-process server.

  - suite: ill-formed-parameters
    tests:
    - sh: ./sandbox/rex help settings --project rex.unknown
      stdout: |+
        FATAL ERROR: Failed to satisfy requirement:
            rex.unknown

    - sh: ./sandbox/rex help settings --project ../test/data/ill_formed_setting/
      stdout: |+
        [debug]
        Declared in:
          rex.core
        Description:
          Turn on debug mode.

    - sh: ./sandbox/rex help settings --project ../test/data/broken_setting/
      stdout: |+
        [debug]
        Declared in:
          rex.core
        Description:
          Turn on debug mode.

    - sh: ./sandbox/rex help settings
      stdout: |+
        FATAL ERROR: invalid value for setting --parameters: expected a dictionary of application parameters

- sh: pip uninstall -q -y rex.ctl_demo
  stdout: ''
- py: load-accumulated-coverage-data
  stdout: ''
