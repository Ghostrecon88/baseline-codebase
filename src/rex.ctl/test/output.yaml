#
# This file contains expected test output data generated by PBBT.
#
---
suite: rex.ctl
tests:
- sh: pip install -q -e ./demo/rex.ctl_demo
  stdout: ''
- rex: dropdb rex.ctl_demo
  stdout: |
    Database pgsql:///ctl_demo does not exist.
- suite: python-m-rex.ctl
  tests:
  - py: simulate-python-m-rex.ctl-invocation
    stdout: |
      Rex - Command-line administration utility for the RexDB platform
      Usage: __main__.py [<settings>...] <task> [<arguments>...]

      Run __main__.py help for general usage and a list of tasks and settings.
      Run __main__.py help <topic> for help on a specific task or setting.
- suite: rex-help
  tests:
  - rex: ''
    stdout: |
      Rex - Command-line administration utility for the RexDB platform
      Usage: rex [<settings>...] <task> [<arguments>...]

      Run rex help for general usage and a list of tasks and settings.
      Run rex help <topic> for help on a specific task or setting.
  - rex: help
    stdout: |+
      Rex - Command-line administration utility for the RexDB platform
      Usage: rex [<settings>...] <task> [<arguments>...]

      Run rex help for general usage and a list of tasks,
      settings and other help topics.

      Run rex help <topic> for help on a specific topic.

      Available tasks:
        createdb [<project>]     : create application database
        deploy [<project>]       : deploy database schema
        dropdb [<project>]       : delete application database
        dumpdb [<project>]       : dump application database
        help [<topic>]           : display help on tasks and settings
        loaddb [<project>]       : load application database
        packages [<project>]     : list application components
        serve [<project>]        : start an HTTP server
        settings [<project>]     : list configuration parameters
        shell [<project>]        : open HTSQL shell
        wsgi [<project>]         : generate a WSGI script

      Settings:
        --debug                  : print debug information
        --http-host=HOSTNAME     : HTTP server address
        --http-port=PORT         : HTTP server port
        --parameters=CONFIG      : application configuration
        --project=NAME           : primary package
        --requirements=NAMES     : additional application components

  - rex: help deploy
    stdout: |+
      DEPLOY - deploy database schema
      Usage: rex deploy [<project>]

      The deploy task brings the database to the state prescribed by
      the application.

      This task takes one argument: the name of the primary RexDB package.
      Alternatively, the package could be specified using project setting.

      Use option --require or setting requirements to specify additional
      packages to include with the application.

      Use option --set or setting parameters to specify configuration
      parameters of the application.

      Options:
        --require=PACKAGE        : include an additional package
        --set=PARAM=VALUE        : set a configuration parameter
        --dry-run                : immediately rollback the changes

  - rex: help shell
    stdout: |+
      SHELL - open HTSQL shell
      Usage: rex shell [<project>]

      The shell task opens an HTSQL shell to the application database.

      This task takes one argument: the name of the primary RexDB package.
      Alternatively, the package could be specified using project setting.

      Use option --require or setting requirements to specify additional
      packages to include with the application.

      Use option --set or setting parameters to specify configuration
      parameters of the application.

      Use option --extend (-E) to enable an HTSQL extension.

      Options:
        --require=PACKAGE        : include an additional package
        --set=PARAM=VALUE        : set a configuration parameter
        -E/--extend=EXT:PARAM=VALUE : include an HTSQL extension

  - rex: help serve
    stdout: |+
      SERVE - start an HTTP server
      Usage: rex serve [<project>]

      The serve task starts an HTTP server to serve a RexDB application.

      This task takes one argument: the name of the primary RexDB package.
      Alternatively, the package could be specified using project setting.

      Use option --require or setting requirements to specify additional
      packages to include with the application.

      Use option --set or setting parameters to specify configuration
      parameters of the application.

      Use options --host and --port or settings http-host and http-port
      to specify the address and the port number for the HTTP server.
      If neither are set, the server is started on 127.0.0.1:8080.

      By default, the server dumps HTTP logs in Apache Common Log Format
      to stdout.  Use option --quiet to suppress this output.  Unhandled
      application exceptions are dumped to stderr.

      Toggle debug setting to run the application in debug mode and report
      unhandled exceptions to the client.

      Options:
        --require=PACKAGE        : include an additional package
        --set=PARAM=VALUE        : set a configuration parameter
        -h/--host=HOSTNAME       : bind to the specified host
        -p/--port=PORT           : bind to the specified port
        -q/--quiet               : suppress HTTP logs

  - rex: help wsgi
    stdout: |+
      WSGI - generate a WSGI script
      Usage: rex wsgi [<project>]

      The wsgi task generates a WSGI script for a RexDB application, which
      could be used with uwsgi, mod_wsgi or any other WSGI container.

      This task takes one argument: the name of the primary RexDB package.
      Alternatively, the package could be specified using project setting.

      Use option --require or setting requirements to specify additional
      packages to include with the application.

      Use option --set or setting parameters to specify configuration
      parameters of the application.

      Use option --output to specify where to write the generated script.

      Options:
        --require=PACKAGE        : include an additional package
        --set=PARAM=VALUE        : set a configuration parameter
        -o/--output=FILE         : write the script to a file

  - rex: help packages
    stdout: |+
      PACKAGES - list application components
      Usage: rex packages [<project>]

      The packages task lists components of a RexDB application.

      This task takes one argument: the name of the primary RexDB package.
      Alternatively, the package could be specified using project setting.

      Use option --require or setting requirements to specify additional
      packages to include with the application.

      Options:
        --require=PACKAGE        : include an additional package

  - rex: help settings
    stdout: |+
      SETTINGS - list configuration parameters
      Usage: rex settings [<project>]

      The settings task lists configuration parameters of a RexDB application.

      This task takes one argument: the name of the primary RexDB package.
      Alternatively, the package could be specified using project setting.

      Use option --require or setting requirements to specify additional
      packages to include with the application.

      Options:
        --require=PACKAGE        : include an additional package

  - rex: help http-host
    stdout: |+
      HTTP-HOST - HTTP server address
      Usage: rex --http-host=HOSTNAME
             http-host: HOSTNAME (rex.yaml)
             REX_HTTP_HOST=HOSTNAME (environment)

      The default address of the HTTP server.

  - rex: help http-port
    stdout: |+
      HTTP-PORT - HTTP server port
      Usage: rex --http-port=PORT
             http-port: PORT (rex.yaml)
             REX_HTTP_PORT=PORT (environment)

      The default port number for the HTTP server.

  - rex: help project
    stdout: |+
      PROJECT - primary package
      Usage: rex --project=NAME
             project: NAME (rex.yaml)
             REX_PROJECT=NAME (environment)

      The primary package of the application.

  - rex: help requirements
    stdout: |+
      REQUIREMENTS - additional application components
      Usage: rex --requirements=NAMES
             requirements: NAMES (rex.yaml)
             REX_REQUIREMENTS=NAMES (environment)

      Additional packages to include with the application.

  - rex: help parameters
    stdout: |+
      PARAMETERS - application configuration
      Usage: rex --parameters=CONFIG
             parameters: CONFIG (rex.yaml)
             REX_PARAMETERS=CONFIG (environment)

      A dictionary with application parameters.

- suite: rex-createdb-etc
  tests:
  - rex: createdb rex.ctl_demo
    stdout: |
      Creating database pgsql:///ctl_demo.
  - rex: dumpdb rex.ctl_demo -o ctl_demo.sql
    stdout: ''
  - rex: dropdb rex.ctl_demo
    stdout: |
      Dropping database pgsql:///ctl_demo.
  - rex: loaddb rex.ctl_demo -i ctl_demo.sql
    stdout: |
      Creating database pgsql:///ctl_demo.
  - rex: dropdb rex.ctl_demo
    stdout: |
      Dropping database pgsql:///ctl_demo.
- suite: rex-deploy
  tests:
  - rex: deploy rex.ctl_demo
    stdout: |
      Creating database pgsql:///ctl_demo.
      Deploying application database to pgsql:///ctl_demo.
      Deploying rex.ctl_demo.
      Validating rex.ctl_demo.
      Done.
- suite: rex-shell
  tests:
  - rex: shell rex.ctl_demo
    stdout: |+
      PGSQL:///ctl_demo - HTSQL database

      Labels:
        course                   : table
        department               : table
        program                  : table
        school                   : table

- suite: rex-serve
  tests:
  - suite: run-with-no-project
    tests:
    - rex: serve
      stdout: |+
        FATAL ERROR: package rex.web must be included with the application

  - suite: run-with-a-project
    tests:
    - rex: serve rex.ctl_demo
      stdout: null
    - get: /
      status: HTTP/1.0 200 OK
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:46:24 GMT']
      - [Content-Length, '55']
      - [Content-Type, text/html; charset=UTF-8]
      body: '<!DOCTYPE html>

        <title>Welcome to REX.CTL_DEMO!</title>'
    - rex: serve rex.ctl_demo
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [19/Sep/2013 14:12:32] "GET / HTTP/1.1" 200 55

  - suite: using-require-option
    tests:
    - rex: serve rex.ctl_demo --require ../test/data/shared/
      stdout: null
    - get: /
      status: HTTP/1.0 200 OK
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:46:31 GMT']
      - [Content-Length, '55']
      - [Content-Type, text/html; charset=UTF-8]
      body: '<!DOCTYPE html>

        <title>Welcome to REX.CTL_DEMO!</title>'
    - get: /shared/shared.css
      status: HTTP/1.0 200 OK
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:46:35 GMT']
      - [Last-Modified, 'Thu, 19 Sep 2013 14:53:03 GMT']
      - [Content-Length, '49']
      - [Content-Type, text/css; charset=UTF-8]
      - [Accept-Ranges, bytes]
      body: |2+

        body {
          font-family: 'Comic Sans', cursive;
        }

    - rex: serve rex.ctl_demo --require ../test/data/shared/
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [19/Sep/2013 14:12:35] "GET / HTTP/1.1" 200 55
        localhost - - [19/Sep/2013 14:12:35] "GET /shared/shared.css HTTP/1.1" 200 49

  - suite: using-set-option
    tests:
    - rex: serve rex.ctl_demo --set hello_access=anybody
      stdout: null
    - get: /hello
      status: HTTP/1.0 200 OK
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:46:42 GMT']
      - [Content-Length, '13']
      - [Content-Type, text/plain; charset=UTF-8]
      body: Hello, World!
    - rex: serve rex.ctl_demo --set hello_access=anybody
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [19/Sep/2013 14:12:38] "GET /hello HTTP/1.1" 200 13

  - suite: invalid-requirement-or-parameter
    tests:
    - rex: serve rex.ctl_demo --require unknown-package
      stdout: |+
        FATAL ERROR: Failed to satisfy requirement:
            unknown-package
        While initializing RexDB application:
            rex.ctl_demo
            unknown-package

    - rex: serve rex.ctl_demo --set unknown-parameter=true
      stdout: |+
        FATAL ERROR: Got unknown setting:
            unknown-parameter
        While initializing RexDB application:
            rex.ctl_demo
        With parameters:
            unknown-parameter: 'true'

  - suite: server-address-with-http-host-and-http-port
    tests:
    - rex: --http-host=localhost --http-port=8088 serve rex.ctl_demo
      stdout: null
    - get: http://localhost:8088/
      status: HTTP/1.0 200 OK
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:46:48 GMT']
      - [Content-Length, '55']
      - [Content-Type, text/html; charset=UTF-8]
      body: '<!DOCTYPE html>

        <title>Welcome to REX.CTL_DEMO!</title>'
    - rex: --http-host=localhost --http-port=8088 serve rex.ctl_demo
      stdout: |+
        Serving rex.ctl_demo on localhost:8088
        localhost - - [19/Sep/2013 14:12:47] "GET / HTTP/1.1" 200 55

  - suite: server-address-with-host-and-port
    tests:
    - rex: --http-host=localhost --http-port=8088 serve rex.ctl_demo -h 127.0.0.1
        -p 8080
      stdout: null
    - get: /
      status: HTTP/1.0 200 OK
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:46:51 GMT']
      - [Content-Length, '55']
      - [Content-Type, text/html; charset=UTF-8]
      body: '<!DOCTYPE html>

        <title>Welcome to REX.CTL_DEMO!</title>'
    - rex: --http-host=localhost --http-port=8088 serve rex.ctl_demo -h 127.0.0.1
        -p 8080
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [19/Sep/2013 14:12:49] "GET / HTTP/1.1" 200 55

  - suite: invalid-http-host-and-http-port
    tests:
    - rex: serve rex.ctl_demo
      stdout: |+
        FATAL ERROR: invalid value for setting --http-host: expected a host name or an IP address

    - rex: serve rex.ctl_demo
      stdout: |
        Serving rex.ctl_demo on 256.56.6.0:8080
        [Errno -2] Name or service not known
    - rex: serve rex.ctl_demo
      stdout: |+
        FATAL ERROR: invalid value for setting --http-port: expected a port number

    - rex: serve rex.ctl_demo
      stdout: |+
        FATAL ERROR: invalid value for setting --http-port: invalid literal for int() with base 10: 'localhost'

    - rex: serve rex.ctl_demo
      stdout: |+
        FATAL ERROR: invalid value for setting --http-port: expected a port number

    - rex: serve rex.ctl_demo
      stdout: |
        Serving rex.ctl_demo on 127.0.0.1:80
        [Errno 13] Permission denied
  - suite: http-auth
    tests:
    - rex: serve rex.ctl_demo
      stdout: null
    - get: http://Aladdin@localhost:8080/
      status: HTTP/1.0 200 OK
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:46:57 GMT']
      - [Content-Length, '55']
      - [Content-Type, text/html; charset=UTF-8]
      body: '<!DOCTYPE html>

        <title>Welcome to REX.CTL_DEMO!</title>'
    - get: http://Aladdin:open%20sesame@localhost:8080/
      status: HTTP/1.0 200 OK
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:47:01 GMT']
      - [Content-Length, '55']
      - [Content-Type, text/html; charset=UTF-8]
      body: '<!DOCTYPE html>

        <title>Welcome to REX.CTL_DEMO!</title>'
    - rex: serve rex.ctl_demo
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [19/Sep/2013 14:13:16] "GET / HTTP/1.1" 200 55
        localhost - Aladdin [19/Sep/2013 14:13:16] "GET / HTTP/1.1" 200 55

  - suite: unhandled-exceptions
    tests:
    - rex: serve rex.ctl_demo
      stdout: null
    - get: /
      status: HTTP/1.0 200 OK
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:47:04 GMT']
      - [Content-Length, '55']
      - [Content-Type, text/html; charset=UTF-8]
      body: '<!DOCTYPE html>

        <title>Welcome to REX.CTL_DEMO!</title>'
    - get: /error
      status: HTTP/1.0 500 Internal Server Error
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:48:08 GMT']
      - [Content-Length, '59']
      - [Content-Type, text/plain]
      body: A server error occurred.  Please contact the administrator.
    - rex: serve rex.ctl_demo
      stdout: |+
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [19/Sep/2013 14:13:19] "GET / HTTP/1.1" 200 55
        ----------------------------------------------------------------------
        [2013-09-19 14:13:19.677919] localhost => http://127.0.0.1:8080/error
        Traceback (most recent call last):
          File "/usr/lib/python2.7/wsgiref/handlers.py", line 85, in run
            self.result = application(self.environ, self.start_response)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.core-opensource/src/rex/core/application.py", line 84, in __call__
            output = wsgi(environ, start_response)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 362, in __call__
            resp = self.handler(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 120, in __call__
            resp = self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 151, in __call__
            return self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 185, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 281, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 299, in __call__
            return handler(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/command.py", line 84, in __call__
            return self.render(req, **arguments)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.ctl-opensource-regress/demo/rex.ctl_demo/src/rex/ctl_demo.py", line 35, in render
            raise RuntimeError("some unexpected problem occurred")
        RuntimeError: some unexpected problem occurred
        localhost - - [19/Sep/2013 14:13:19] "GET /error HTTP/1.1" 500 59

  - suite: unhandled-exceptions-with-debug
    tests:
    - rex: serve rex.ctl_demo --debug
      stdout: null
    - get: /
      status: HTTP/1.0 200 OK
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:48:11 GMT']
      - [Content-Length, '55']
      - [Content-Type, text/html; charset=UTF-8]
      body: '<!DOCTYPE html>

        <title>Welcome to REX.CTL_DEMO!</title>'
    - get: /error
      status: HTTP/1.0 500 Internal Server Error
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:48:12 GMT']
      - [Content-Type, text/plain]
      body: |
        A server error occurred.  Please contact the administrator.

        [2013-09-19 10:48:12.981468] localhost => http://127.0.0.1:8080/error
        Traceback (most recent call last):
          File "/usr/lib/python2.7/wsgiref/handlers.py", line 85, in run
            self.result = application(self.environ, self.start_response)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.core-opensource/src/rex/core/application.py", line 84, in __call__
            output = wsgi(environ, start_response)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 362, in __call__
            resp = self.handler(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 120, in __call__
            resp = self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 151, in __call__
            return self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 185, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 281, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 299, in __call__
            return handler(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/command.py", line 84, in __call__
            return self.render(req, **arguments)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.ctl-opensource-regress/demo/rex.ctl_demo/src/rex/ctl_demo.py", line 35, in render
            raise RuntimeError("some unexpected problem occurred")
        RuntimeError: some unexpected problem occurred
    - rex: serve rex.ctl_demo --debug
      stdout: |
        Serving rex.ctl_demo on 127.0.0.1:8080
        localhost - - [19/Sep/2013 14:13:26] "GET / HTTP/1.1" 200 55
        ----------------------------------------------------------------------
        [2013-09-19 14:13:26.395676] localhost => http://127.0.0.1:8080/error
        Traceback (most recent call last):
          File "/usr/lib/python2.7/wsgiref/handlers.py", line 85, in run
            self.result = application(self.environ, self.start_response)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.core-opensource/src/rex/core/application.py", line 84, in __call__
            output = wsgi(environ, start_response)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 362, in __call__
            resp = self.handler(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 120, in __call__
            resp = self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 151, in __call__
            return self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 185, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 281, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 299, in __call__
            return handler(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/command.py", line 84, in __call__
            return self.render(req, **arguments)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.ctl-opensource-regress/demo/rex.ctl_demo/src/rex/ctl_demo.py", line 35, in render
            raise RuntimeError("some unexpected problem occurred")
        RuntimeError: some unexpected problem occurred
        localhost - - [19/Sep/2013 14:13:26] "GET /error HTTP/1.1" 500 1727
  - suite: handling-invalid-requests
    tests:
    - rex: serve rex.ctl_demo --debug
      stdout: null
    - get: /invalid /request
      status: 'HTTP/0.9 200 '
      headers: []
      body: |
        <head>
        <title>Error response</title>
        </head>
        <body>
        <h1>Error response</h1>
        <p>Error code 400.
        <p>Message: Bad request syntax ('GET /invalid /request HTTP/1.1').
        <p>Error code explanation: 400 = Bad request syntax or unsupported method.
        </body>
    - rex: serve rex.ctl_demo --debug
      stdout: |
        Serving rex.ctl_demo on 127.0.0.1:8080
        Invalid request: code 400, message Bad request syntax ('GET /invalid /request HTTP/1.1')
        localhost - - [19/Sep/2013 14:13:28] "GET /invalid /request HTTP/1.1" 400 -
  - suite: using-quiet-option
    tests:
    - rex: serve rex.ctl_demo --quiet
      stdout: null
    - get: /
      status: HTTP/1.0 200 OK
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:48:36 GMT']
      - [Content-Length, '55']
      - [Content-Type, text/html; charset=UTF-8]
      body: '<!DOCTYPE html>

        <title>Welcome to REX.CTL_DEMO!</title>'
    - get: /error
      status: HTTP/1.0 500 Internal Server Error
      headers:
      - [Date, 'Thu, 19 Sep 2013 15:49:03 GMT']
      - [Content-Length, '59']
      - [Content-Type, text/plain]
      body: A server error occurred.  Please contact the administrator.
    - rex: serve rex.ctl_demo --quiet
      stdout: |+
        ----------------------------------------------------------------------
        [2013-09-19 14:13:36.282577] localhost => http://127.0.0.1:8080/error
        Traceback (most recent call last):
          File "/usr/lib/python2.7/wsgiref/handlers.py", line 85, in run
            self.result = application(self.environ, self.start_response)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.core-opensource/src/rex/core/application.py", line 84, in __call__
            output = wsgi(environ, start_response)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 362, in __call__
            resp = self.handler(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 120, in __call__
            resp = self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 151, in __call__
            return self.trunk(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 185, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 281, in __call__
            return self.fallback(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/route.py", line 299, in __call__
            return handler(req)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.web-opensource/src/rex/web/command.py", line 84, in __call__
            return self.render(req, **arguments)
          File "/home/xi/xitology/prometheus/rex/opensource/rex.ctl-opensource-regress/demo/rex.ctl_demo/src/rex/ctl_demo.py", line 35, in render
            raise RuntimeError("some unexpected problem occurred")
        RuntimeError: some unexpected problem occurred

- suite: rex-wsgi
  tests:
  - suite: requirements-and-parameters
    tests:
    - rex: wsgi
      stdout: |+
        FATAL ERROR: package rex.web must be included with the application

    - rex: wsgi rex.ctl_demo
      stdout: |2+

        # WSGI script for the `rex.ctl_demo` application.
        # Use it with `uwsgi`, `mod_wsgi` or any other WSGI container.

        from rex.core import Rex

        requirements = [
            'rex.ctl_demo',
        ]

        parameters = {
        }

        application = Rex(*requirements, **parameters)

    - rex: wsgi rex.ctl_demo --require ../test/data/shared/
      stdout: |2+

        # WSGI script for the `rex.ctl_demo` application.
        # Use it with `uwsgi`, `mod_wsgi` or any other WSGI container.

        from rex.core import Rex

        requirements = [
            'rex.ctl_demo',
            '../test/data/shared/',
        ]

        parameters = {
        }

        application = Rex(*requirements, **parameters)

    - rex: wsgi rex.ctl_demo --set hello_access=anybody
      stdout: |2+

        # WSGI script for the `rex.ctl_demo` application.
        # Use it with `uwsgi`, `mod_wsgi` or any other WSGI container.

        from rex.core import Rex

        requirements = [
            'rex.ctl_demo',
        ]

        parameters = {
            'hello_access': 'anybody',
        }

        application = Rex(*requirements, **parameters)

    - rex: wsgi rex.ctl_demo --require unknown-package
      stdout: |+
        FATAL ERROR: Failed to satisfy requirement:
            unknown-package

    - rex: wsgi rex.ctl_demo --set unknown-parameter=true
      stdout: |+
        FATAL ERROR: Got unknown setting:
            unknown-parameter

  - suite: using-output-option
    tests:
    - rex: wsgi rex.ctl_demo -o ctl_demo.wsgi
      stdout: ''
    - read: ./sandbox/ctl_demo.wsgi
      data: |2+

        # WSGI script for the `rex.ctl_demo` application.
        # Use it with `uwsgi`, `mod_wsgi` or any other WSGI container.

        from rex.core import Rex

        requirements = [
            'rex.ctl_demo',
        ]

        parameters = {
        }

        application = Rex(*requirements, **parameters)

- suite: rex-packages
  tests:
  - suite: run-with-no-project
    tests:
    - rex: packages
      stdout: |+
        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.core/src
        Summary:
          Foundation of the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

  - suite: run-with-a-project
    tests:
    - rex: packages --project rex.ctl_demo
      stdout: |+
        [rex.ctl_demo]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.ctl/demo/rex.ctl_demo/src
        Resources:
          /home/xi/xitology/prometheus/rex/opensource/rex.ctl/demo/rex.ctl_demo/static
        Dependencies:
          rex.web
          rex.db
          rex.deploy

        [rex.deploy]
        Version:
          0.1.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.deploy/src
        Resources:
          /home/xi/xitology/prometheus/rex/opensource/rex.deploy/static
        Summary:
          Database schema management for RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.deploy
        Dependencies:
          rex.core>=1.0,<2
          rex.db>=1.0,<2

        [rex.db]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.db/src
        Summary:
          Database access for the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.db
        Dependencies:
          rex.core>=1.0,<2
          rex.web>=1.0,<2
          HTSQL>=2.3.3,<2.5

        [rex.web]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.web/src
        Summary:
          Web stack for the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.web
        Dependencies:
          rex.core>=1.0,<2
          webob>=1.2.3,<1.3
          jinja2>=2.7,<2.8
          pycrypto>=2.4
          pbkdf2>=1.3

        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.core/src
        Summary:
          Foundation of the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

    - rex: packages --requirements rex.ctl_demo
      stdout: |+
        [rex.ctl_demo]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.ctl/demo/rex.ctl_demo/src
        Resources:
          /home/xi/xitology/prometheus/rex/opensource/rex.ctl/demo/rex.ctl_demo/static
        Dependencies:
          rex.web
          rex.db
          rex.deploy

        [rex.deploy]
        Version:
          0.1.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.deploy/src
        Resources:
          /home/xi/xitology/prometheus/rex/opensource/rex.deploy/static
        Summary:
          Database schema management for RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.deploy
        Dependencies:
          rex.core>=1.0,<2
          rex.db>=1.0,<2

        [rex.db]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.db/src
        Summary:
          Database access for the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.db
        Dependencies:
          rex.core>=1.0,<2
          rex.web>=1.0,<2
          HTSQL>=2.3.3,<2.5

        [rex.web]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.web/src
        Summary:
          Web stack for the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.web
        Dependencies:
          rex.core>=1.0,<2
          webob>=1.2.3,<1.3
          jinja2>=2.7,<2.8
          pycrypto>=2.4
          pbkdf2>=1.3

        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.core/src
        Summary:
          Foundation of the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

    - rex: packages --requirements '["rex.ctl_demo"]'
      stdout: |+
        [rex.ctl_demo]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.ctl/demo/rex.ctl_demo/src
        Resources:
          /home/xi/xitology/prometheus/rex/opensource/rex.ctl/demo/rex.ctl_demo/static
        Dependencies:
          rex.web
          rex.db
          rex.deploy

        [rex.deploy]
        Version:
          0.1.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.deploy/src
        Resources:
          /home/xi/xitology/prometheus/rex/opensource/rex.deploy/static
        Summary:
          Database schema management for RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.deploy
        Dependencies:
          rex.core>=1.0,<2
          rex.db>=1.0,<2

        [rex.db]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.db/src
        Summary:
          Database access for the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.db
        Dependencies:
          rex.core>=1.0,<2
          rex.web>=1.0,<2
          HTSQL>=2.3.3,<2.5

        [rex.web]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.web/src
        Summary:
          Web stack for the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.web
        Dependencies:
          rex.core>=1.0,<2
          webob>=1.2.3,<1.3
          jinja2>=2.7,<2.8
          pycrypto>=2.4
          pbkdf2>=1.3

        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.core/src
        Summary:
          Foundation of the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

  - suite: module-and-static-requirements
    tests:
    - rex: packages --requirements rex.core.application
      stdout: |+
        [rex.core.application]
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.core/src/rex/core/application.pyc

        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.core/src
        Summary:
          Foundation of the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

    - rex: packages --requirements ../test/data/shared/
      stdout: |+
        [shared]
        Resources:
          /home/xi/xitology/prometheus/rex/opensource/rex.ctl/test/data/shared

        [rex.core]
        Version:
          1.0.0
        Location:
          /home/xi/xitology/prometheus/rex/opensource/rex.core/src
        Summary:
          Foundation of the RexDB platform
        URL:
          https://bitbucket.org/prometheus/rex.core
        Dependencies:
          rex.setup>=1.0,<2
          pyyaml

  - suite: ill-formed-requirements
    tests:
    - rex: packages --project rex.unknown
      stdout: |+
        FATAL ERROR: Failed to satisfy requirement:
            rex.unknown

    - rex: packages
      stdout: |+
        FATAL ERROR: invalid value for setting --project: expected a project name

    - rex: packages
      stdout: |+
        FATAL ERROR: invalid value for setting --requirements: expected a list of requirements

- suite: rex-settings
  tests:
  - suite: run-with-no-project
    tests:
    - rex: settings
      stdout: |+
        [debug]
        Declared in:
          rex.core
        Description:
          Turn on debug mode.

  - suite: run-with-a-project-and-parameters
    tests:
    - rex: settings --project rex.ctl_demo
      stdout: |+
        [db]
        Declared in:
          rex.db
        Mandatory?
          true
        Preset in:
          rex.ctl_demo
        Value:
          'pgsql:ctl_demo'
        Description:
          Database connection URI; must have the form::

              <engine>://<username>:<password>@<host>:<port>/<database>

          `<engine>`
              Type of the database server, e.g., ``sqlite``, ``pgsql``, ``mysql``.
          `<username>:<password>`
              Authentication parameters.
          `<host>:<port>`
              The address of the database server.
          `<database>`
              The name of the database; for SQLite, the path to the database file.

          All parameters except ``<engine>`` and ``<database>`` are optional.

          The connection parameters could be also provided as a record with fields
          ``engine``, ``username``, ``password``, ``host``, ``port``, ``database``.

          Examples::

              db: sqlite:///sandbox/htsql_demo.sqlite

              db: pgsql://htsql_demo:demo@localhost/htsql_demo

              db:
                  engine: mysql
                  database: htsql_demo

        [debug]
        Declared in:
          rex.core
        Description:
          Turn on debug mode.

        [hello_access]
        Declared in:
          rex.ctl_demo
        Mandatory?
          true
        Preset in:
          rex.ctl_demo
        Value:
          'authenticated'
        Description:
          Permission to use the `/hello` command.

        [htsql_access]
        Declared in:
          rex.db
        Description:
          Permission to access the HTSQL service.

          Set to ``None`` to disable HTSQL service.  The default value is
          ``'authenticated'``.

          Example::

              htsql_access: anybody

        [htsql_extensions]
        Declared in:
          rex.db
        Preset in:
          rex.deploy
        Value:
          {'rex_deploy': {}}
        Description:
          Configuration of HTSQL extensions.

          Use this setting to preset HTSQL configuration for a particular
          application or to override the preset HTSQL configuration.

          The value of this setting is a dictionary that maps addon names
          to addon configuration.  Addon configuration is a dictionary mapping
          addon parameters to parameter values.

          Example::

              htsql_extensions:
                  tweak.meta:
                  tweak.shell.default:
                  tweak.timeout:
                      timeout: 600
                  tweak.autolimit:
                      limit: 10000

          This setting could be specified more than once.  Configuration
          parameters preset by different packages are merged into one.

        [mount]
        Declared in:
          rex.web
        Description:
          Mount table that maps package names to path segments.

          For each package, this setting specifies the base URL segment
          for commands and static resources that belong to the package.
          The value of this setting is a dictionary; the keys are package
          names, the values are URL segments.

          Example::

              mount:
                  rex.web_demo:   /demo/

          It is not an error to omit some packages or the whole setting entirely.
          If the mount point for a package is not specified, it is determined
          as follows:

          1. The first package in the application requirement list is mounted
             at ``/``.
          2. Otherwise, a normalized package name is used as the mount point.

          It is permitted for two or more packages to share the mount point.
          When several packages are mounted at the same URL segment, the request
          is handled by the first package that contains a command or a static
          resource that matches the URL.

          This setting could be specified more than once.  Mount tables preset
          by different packages are merged into one.

        [secret]
        Declared in:
          rex.web
        Preset in:
          rex.ctl_demo
        Value:
          'For the sake of demonstration only.  Normally, you would never preset this parameter.'
        Description:
          Secret passphrase for generating private keys.

          Example::

              secret: A S3cr3t Passphras3!

          If not set, a random key is used.  This setting must be specified if
          the application is running under a multi-process HTTP server.

    - rex: settings --project rex.ctl_demo --parameters 'debug hello_access=anybody'
      stdout: |+
        [db]
        Declared in:
          rex.db
        Mandatory?
          true
        Preset in:
          rex.ctl_demo
        Value:
          'pgsql:ctl_demo'
        Description:
          Database connection URI; must have the form::

              <engine>://<username>:<password>@<host>:<port>/<database>

          `<engine>`
              Type of the database server, e.g., ``sqlite``, ``pgsql``, ``mysql``.
          `<username>:<password>`
              Authentication parameters.
          `<host>:<port>`
              The address of the database server.
          `<database>`
              The name of the database; for SQLite, the path to the database file.

          All parameters except ``<engine>`` and ``<database>`` are optional.

          The connection parameters could be also provided as a record with fields
          ``engine``, ``username``, ``password``, ``host``, ``port``, ``database``.

          Examples::

              db: sqlite:///sandbox/htsql_demo.sqlite

              db: pgsql://htsql_demo:demo@localhost/htsql_demo

              db:
                  engine: mysql
                  database: htsql_demo

        [debug]
        Declared in:
          rex.core
        Value:
          True
        Description:
          Turn on debug mode.

        [hello_access]
        Declared in:
          rex.ctl_demo
        Mandatory?
          true
        Value:
          'anybody'
        Description:
          Permission to use the `/hello` command.

        [htsql_access]
        Declared in:
          rex.db
        Description:
          Permission to access the HTSQL service.

          Set to ``None`` to disable HTSQL service.  The default value is
          ``'authenticated'``.

          Example::

              htsql_access: anybody

        [htsql_extensions]
        Declared in:
          rex.db
        Preset in:
          rex.deploy
        Value:
          {'rex_deploy': {}}
        Description:
          Configuration of HTSQL extensions.

          Use this setting to preset HTSQL configuration for a particular
          application or to override the preset HTSQL configuration.

          The value of this setting is a dictionary that maps addon names
          to addon configuration.  Addon configuration is a dictionary mapping
          addon parameters to parameter values.

          Example::

              htsql_extensions:
                  tweak.meta:
                  tweak.shell.default:
                  tweak.timeout:
                      timeout: 600
                  tweak.autolimit:
                      limit: 10000

          This setting could be specified more than once.  Configuration
          parameters preset by different packages are merged into one.

        [mount]
        Declared in:
          rex.web
        Description:
          Mount table that maps package names to path segments.

          For each package, this setting specifies the base URL segment
          for commands and static resources that belong to the package.
          The value of this setting is a dictionary; the keys are package
          names, the values are URL segments.

          Example::

              mount:
                  rex.web_demo:   /demo/

          It is not an error to omit some packages or the whole setting entirely.
          If the mount point for a package is not specified, it is determined
          as follows:

          1. The first package in the application requirement list is mounted
             at ``/``.
          2. Otherwise, a normalized package name is used as the mount point.

          It is permitted for two or more packages to share the mount point.
          When several packages are mounted at the same URL segment, the request
          is handled by the first package that contains a command or a static
          resource that matches the URL.

          This setting could be specified more than once.  Mount tables preset
          by different packages are merged into one.

        [secret]
        Declared in:
          rex.web
        Preset in:
          rex.ctl_demo
        Value:
          'For the sake of demonstration only.  Normally, you would never preset this parameter.'
        Description:
          Secret passphrase for generating private keys.

          Example::

              secret: A S3cr3t Passphras3!

          If not set, a random key is used.  This setting must be specified if
          the application is running under a multi-process HTTP server.

    - rex: settings --project rex.ctl_demo --parameters '{"debug":true,"hello_access":"anybody"}'
      stdout: |+
        [db]
        Declared in:
          rex.db
        Mandatory?
          true
        Preset in:
          rex.ctl_demo
        Value:
          'pgsql:ctl_demo'
        Description:
          Database connection URI; must have the form::

              <engine>://<username>:<password>@<host>:<port>/<database>

          `<engine>`
              Type of the database server, e.g., ``sqlite``, ``pgsql``, ``mysql``.
          `<username>:<password>`
              Authentication parameters.
          `<host>:<port>`
              The address of the database server.
          `<database>`
              The name of the database; for SQLite, the path to the database file.

          All parameters except ``<engine>`` and ``<database>`` are optional.

          The connection parameters could be also provided as a record with fields
          ``engine``, ``username``, ``password``, ``host``, ``port``, ``database``.

          Examples::

              db: sqlite:///sandbox/htsql_demo.sqlite

              db: pgsql://htsql_demo:demo@localhost/htsql_demo

              db:
                  engine: mysql
                  database: htsql_demo

        [debug]
        Declared in:
          rex.core
        Value:
          True
        Description:
          Turn on debug mode.

        [hello_access]
        Declared in:
          rex.ctl_demo
        Mandatory?
          true
        Value:
          u'anybody'
        Description:
          Permission to use the `/hello` command.

        [htsql_access]
        Declared in:
          rex.db
        Description:
          Permission to access the HTSQL service.

          Set to ``None`` to disable HTSQL service.  The default value is
          ``'authenticated'``.

          Example::

              htsql_access: anybody

        [htsql_extensions]
        Declared in:
          rex.db
        Preset in:
          rex.deploy
        Value:
          {'rex_deploy': {}}
        Description:
          Configuration of HTSQL extensions.

          Use this setting to preset HTSQL configuration for a particular
          application or to override the preset HTSQL configuration.

          The value of this setting is a dictionary that maps addon names
          to addon configuration.  Addon configuration is a dictionary mapping
          addon parameters to parameter values.

          Example::

              htsql_extensions:
                  tweak.meta:
                  tweak.shell.default:
                  tweak.timeout:
                      timeout: 600
                  tweak.autolimit:
                      limit: 10000

          This setting could be specified more than once.  Configuration
          parameters preset by different packages are merged into one.

        [mount]
        Declared in:
          rex.web
        Description:
          Mount table that maps package names to path segments.

          For each package, this setting specifies the base URL segment
          for commands and static resources that belong to the package.
          The value of this setting is a dictionary; the keys are package
          names, the values are URL segments.

          Example::

              mount:
                  rex.web_demo:   /demo/

          It is not an error to omit some packages or the whole setting entirely.
          If the mount point for a package is not specified, it is determined
          as follows:

          1. The first package in the application requirement list is mounted
             at ``/``.
          2. Otherwise, a normalized package name is used as the mount point.

          It is permitted for two or more packages to share the mount point.
          When several packages are mounted at the same URL segment, the request
          is handled by the first package that contains a command or a static
          resource that matches the URL.

          This setting could be specified more than once.  Mount tables preset
          by different packages are merged into one.

        [secret]
        Declared in:
          rex.web
        Preset in:
          rex.ctl_demo
        Value:
          'For the sake of demonstration only.  Normally, you would never preset this parameter.'
        Description:
          Secret passphrase for generating private keys.

          Example::

              secret: A S3cr3t Passphras3!

          If not set, a random key is used.  This setting must be specified if
          the application is running under a multi-process HTTP server.

  - suite: ill-formed-parameters
    tests:
    - rex: settings --project rex.unknown
      stdout: |+
        FATAL ERROR: Failed to satisfy requirement:
            rex.unknown

    - rex: settings --project ../test/data/ill_formed_setting/
      stdout: |+
        [debug]
        Declared in:
          rex.core
        Description:
          Turn on debug mode.

    - rex: settings --project ../test/data/broken_setting/
      stdout: |+
        [debug]
        Declared in:
          rex.core
        Description:
          Turn on debug mode.

    - rex: settings
      stdout: |+
        FATAL ERROR: invalid value for setting --parameters: expected a dictionary of application parameters

- sh: pip uninstall -q -y rex.ctl_demo
  stdout: ''
- py: load-accumulated-coverage-data
  stdout: ''
