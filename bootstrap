#!/bin/sh

_NORM=$(tput sgr0)
_RED=$(tput setaf 1)
_GREEN=$(tput setaf 2)

log () {
    echo "$@"
}

warn () {
    echo "${_RED}$@${_NORM}"
}

congrat () {
    echo "${_GREEN}$@${_NORM}"
}

main () {
    local CLEAN LOCAL

    cd "$(dirname "$0")"

    while [ $# -gt 0 ]; do
        case "$1" in
            --clean)
                CLEAN=1
                shift
                ;;
            --local)
                LOCAL=1
                shift
                ;;
            *)
                shift
                usage
                exit 1
                ;;
        esac
    done

    if [ "$CLEAN" -a "$LOCAL" ]; then
        warn "cannot clean the local development environment"
        return 1
    elif [ "$LOCAL" ]; then
        bootstrap_local
    elif [ "$CLEAN" ]; then
        clean
    else
        bootstrap
    fi
}

usage () {
    echo "$0 - bootstrap the development environment in a docker container"
    echo "options:"
    echo "--clean   remove installed containers and volumes"
    echo "--local   create the environment locally"
}

bootstrap_local () {
    _bootstrap_default &&
    _bootstrap_local &&
    congrat "the local development environment is ready!"
}

bootstrap () {
    _bootstrap_prepare &&
    _bootstrap_default &&
    _bootstrap_up &&
    _bootstrap_sync &&
    _bootstrap_remote &&
    _bootstrap_bin &&
    congrat "the development environment is ready!"
}

clean () {
    _bootstrap_clean
}

_bootstrap_bin () {
    log "populating the /bin directory..."
    (
        set -ex
        mkdir -p ./bin
        cat <<-END >./bin/docker-compose
			#!/bin/sh
			cd "$(pwd)" && PATH="$PATH" exec "$(which docker-compose)" "\$@"
		END
        chmod a+x ./bin/docker-compose
        cat <<-'END' >./bin/rsh
			#!/bin/sh

			set -e

			if ! [ -z "${_OLD_VIRTUAL_PATH+_}" ] ; then
			    PATH="$_OLD_VIRTUAL_PATH"
			    export PATH
			    unset _OLD_VIRTUAL_PATH
			fi

			SCRIPTNAME="$(basename "$0")"
			REMOTECMD="/app/bin/$SCRIPTNAME $@"
			if [ "$SCRIPTNAME" = rsh ]; then
				if [ $# -eq 0 ]; then
					REMOTECMD=/bin/bash
				else
					REMOTECMD="$@"
				fi
			fi

			SCRIPTDIR="$(dirname "$0")"
			LOCALDIR="$(pwd)"
			cd "$SCRIPTDIR/.."
			ROOTDIR="$(pwd)/"
			REMOTEDIR="${LOCALDIR#$ROOTDIR}"

			if [ "$REMOTEDIR" = "$LOCALDIR" ]; then
				set -x
				exec docker-compose exec develop $REMOTECMD
			else
				set -x
				exec docker-compose exec develop sh -ce "cd ./$REMOTEDIR && exec $REMOTECMD"
			fi
		END
        chmod a+x ./bin/rsh
        cat <<-END >./bin/activate
			VIRTUAL_ENV="$(pwd)"
			export VIRTUAL_ENV
		END
			cat <<-'END' >>./bin/activate

			deactivate () {
			    unset -f up down

			    if ! [ -z "${_OLD_VIRTUAL_PS1+_}" ] ; then
			        PS1="$_OLD_VIRTUAL_PS1"
			        export PS1
			        unset _OLD_VIRTUAL_PS1
			    fi

			    if ! [ -z "${_OLD_VIRTUAL_PATH+_}" ] ; then
			        PATH="$_OLD_VIRTUAL_PATH"
			        export PATH
			        unset _OLD_VIRTUAL_PATH
			    fi

			    if [ -n "${BASH-}" ] || [ -n "${ZSH_VERSION-}" ] ; then
			        hash -r 2>/dev/null
			    fi

			    unset VIRTUAL_ENV
			    unset -f deactivate
			}

			up () {
			    docker-compose up -d
			}

			down () {
			    docker-compose down
			}

			_OLD_VIRTUAL_PS1="$PS1"
			PS1="[`basename \"$VIRTUAL_ENV\"`] $PS1"
			export PS1

			_OLD_VIRTUAL_PATH="$PATH"
			PATH="$VIRTUAL_ENV/bin:$PATH"
			export PATH

			if [ -n "${BASH-}" ] || [ -n "${ZSH_VERSION-}" ] ; then
			    hash -r 2>/dev/null
			fi
		END
        for exe in $(docker-compose exec develop find bin '!' -type d -executable | tr -d '\r'); do
            ln -sf rsh $exe
        done
    )
    [ $? -eq 0 ] || { warn "failed to populate the /bin directory!" && return 1; }
}

_bootstrap_clean () {
    log "removing containers and volumes..."
    (
        set -ex
        docker-compose down -v --remove-orphans
    )
    [ $? -eq 0 ] || { warn "failed to remove containers and volumes!" && return 1; }
}

_bootstrap_default () {
    log "enabling the default configuration..."
    (
        set -e
        local src
        local dst
        for src in default/.* default/*; do
            if [ ! -f $src ]; then
                continue
            fi
            dst=$(basename $src)
            if [ -e $dst ]; then
                if [ $src -nt $dst ]; then
                    warn "$src has been updated, but $dst already exists"
                fi
            else
                (
                    set -x
                    cp -a $src $dst
                )
            fi
        done
    )
    [ $? -eq 0 ] || { warn "failed to enable the default configuration!" && return 1; }
}

_bootstrap_local () {
    log "building the local development environment..."
    (
        set -ex
        . ./bootstrap.local
    )
    [ $? -eq 0 ] || { warn "failed to build the local development environment!" && return 1; }
}

_bootstrap_prepare () {
    log "preparing container images..."
    (
        set -ex
        docker build -q -t rexdb/runtime ./docker/runtime
        docker build -q -t rexdb/build ./docker/build
        docker build -q -t rexdb/develop ./docker/develop
    )
    [ $? -eq 0 ] || { warn "failed to prepare container images!" && return 1; }
}

_bootstrap_remote () {
    log "building the remote development environment..."
    (
        set -ex
        docker-compose exec develop /bin/sh -ex ./bootstrap.local
    )
    [ $? -eq 0 ] || { warn "failed to build the remote development environment!" && return 1; }
}

_bootstrap_sync () {
    log "synchronizing the source tree..."
    (
        set -ex
        docker-compose exec develop \
            rsync --delete --exclude /.hg/ --exclude /bin/ --exclude /data/ --exclude /run/ \
            --ignore-errors --links --recursive --times \
            /repo/ /app/
    )
    [ $? -eq 0 ] || { warn "failed to synchronize the source tree!" && return 1; }
}

_bootstrap_up () {
    log "starting containers..."
    (
        set -ex
        docker-compose up -d
    )
    [ $? -eq 0 ] || { warn "failed to start containers!" && return 1; }
}

main "$@"
